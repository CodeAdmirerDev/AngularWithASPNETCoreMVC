Day 24: Build Angular Frontend â€“ UI Components with Bootstrap & Best Practices

1. Initial Setup & CLI Commands

1.1. Create Angular project:

Note :if you are not having the exsitng angular app then create the new one:
ng new portfolio-website  
cd portfolio-website  

1.2. Install Bootstrap and dependencies:
npm install bootstrap  

1.3. Include Bootstrap in styles:

In angular.json, add:

json
"styles": [  
  "src/styles.scss",  
  "node_modules/bootstrap/dist/css/bootstrap.min.css"  
]  

Alternative: import Bootstrap in styles.scss:

@import "~bootstrap/scss/bootstrap";  


2. Create Reusable UI Components

Use Angular CLI to generate core UI components:

ng generate component shared/header  
ng generate component shared/footer  
ng generate component shared/card  
ng generate component pages/home  
ng generate component pages/about  
ng generate component pages/projects  
ng generate component pages/contact  

Organize components:

Header & Footer: Navigation UI, social links, footer info.
Card: To display projects/skills.
Pages: Individual pages for content.

3. Component Samples & Styling with Bootstrap
Example: header.component.html
<nav class="navbar navbar-expand-lg navbar-dark bg-primary">  
  <div class="container">  
    <a class="navbar-brand" href="#">MyPortfolio</a>  
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">  
      <span class="navbar-toggler-icon"></span>  
    </button>  
    <div class="collapse navbar-collapse" id="navbarNav">  
      <ul class="navbar-nav ms-auto">  
        <li class="nav-item"><a class="nav-link" routerLink="/">Home</a></li>  
        <li class="nav-item"><a class="nav-link" routerLink="/about">About</a></li>  
        <li class="nav-item"><a class="nav-link" routerLink="/projects">Projects</a></li>  
        <li class="nav-item"><a class="nav-link" routerLink="/contact">Contact</a></li>  
      </ul>  
    </div>  
  </div>  
</nav>  

Example: footer.component.html
<footer class="bg-dark text-white py-4 mt-auto">  
  <div class="container text-center">  
    <p>&copy; 2025 MyPortfolio. All rights reserved.</p>  
    <div>  
      <!-- Social Icons -->  
      <a href="#" class="text-white me-3"><i class="bi bi-github"></i></a>  
      <a href="#" class="text-white me-3"><i class="bi bi-linkedin"></i></a>  
    </div>  
  </div>  
</footer>  

Include Bootstrap Icons:
npm install bootstrap-icons  

And import in angular.json:

json
"styles": [  
  "node_modules/bootstrap-icons/font/bootstrap-icons.css"  
]  

Example: card.component.html (for projects)
<div class="card h-100 shadow-sm">  
  <img [src]="project.image" class="card-img-top" [alt]="project.title" />  
  <div class="card-body d-flex flex-column">  
    <h5 class="card-title">{{ project.title }}</h5>  
    <p class="card-text">{{ project.description }}</p>  
    <a [href]="project.link" target="_blank" class="mt-auto btn btn-outline-primary">View Project</a>  
  </div>  
</div>  
Note: Use @Input() in card.component.ts to pass project data.

CardComponent (shared/card.component.ts)
Here, CardComponent will accept a project object via @Input().

import { Component, Input } from '@angular/core';  

export interface Project {  
  title: string;  
  description: string;  
  image: string;  
  link: string;  
}  

@Component({  
  selector: 'app-card',  
  templateUrl: './card.component.html',  
  styleUrls: ['./card.component.scss']   ,
  standalone:false 
})  
export class CardComponent {  
  @Input() project!: Project;  
}  
In your card.component.html, use bindings like project.title, etc.


4. Designing Pages with Bootstrap
Home Page (home.component.html)
<div class="container my-5 text-center">  
  <h1 class="display-4 mb-4">Welcome to My Portfolio</h1>  
  <p class="lead">Showcasing my Projects, Skills, and Experience</p>  
  <a routerLink="/about" class="btn btn-primary btn-lg m-2">About Me</a>  
  <a routerLink="/projects" class="btn btn-outline-primary btn-lg m-2">My Projects</a>  
</div>  

About Page (about.component.html)
<div class="container my-5">  
    <div class="row align-items-center">  
      <!-- Profile Image / Avatar -->  
      <div class="col-md-4 text-center mb-4 mb-md-0">  
        <img src="assets/img/profile.jpg" alt="My Photo" class="rounded-circle img-fluid shadow" style="max-width: 250px;">  
      </div>  
      <!-- About Content -->  
      <div class="col-md-8">  
        <h2 class="mb-4 text-primary">About Me</h2>  
        
        <p class="lead mb-3">  
          Hello! I'm a passionate web developer with expertise in Angular, Bootstrap, and modern UI/UX design. I love creating beautiful, responsive websites that offer great user experiences.  
        </p>  
        
        <h4 class="mb-3 text-secondary">My Skills</h4>  
        <div class="row row-cols-1 row-cols-md-3 g-3 mb-4">  
          <div class="col" *ngFor="let skill of skills">  
            <div class="card h-100 shadow-sm border-0">  
              <div class="card-body text-center">  
                <i class="{{skill.icon}} mb-3" style="font-size: 2rem;"></i>  
                <h5 class="card-title">{{skill.name}}</h5>  
              </div>  
            </div>  
          </div>  
        </div>  
  
        <h4 class="mb-3 text-secondary">Experience & Education</h4>  
        <ul class="list-group mb-4">  
          <li class="list-group-item">  
            <h6>Senior Frontend Developer at XYZ Corp</h6>  
            <small class="text-muted">2023 - Present</small>  
            <p>Leading Angular projects, building responsive UI components, and implementing best practices in web development.</p>  
          </li>  
          <li class="list-group-item">  
            <h6>BSc in Computer Science</h6>  
            <small class="text-muted">2019 - 2023, ABC University</small>  
            <p>Majored in Software Engineering with a focus on web technologies.</p>  
          </li>  
          <!-- Add more experience/education items -->  
        </ul>  
  
        <a routerLink="/contact" class="btn btn-primary btn-lg">Get in Touch</a>  
      </div>  
    </div>  
  </div>

about.component.ts
import { Component } from '@angular/core';  

@Component({  
  selector: 'app-about',  
  templateUrl: './about.component.html',  
  styleUrls: ['./about.component.scss'] ,
  standalone:false 
})  
export class AboutComponent {  
  // Array of skills with name and icon class for Bootstrap Icons  
  skills = [  
    { name: 'Angular', icon: 'bi bi-angular' },  
    { name: 'Bootstrap', icon: 'bi bi-bootstrap' },  
    { name: 'HTML5', icon: 'bi bi-filetype-html' },  
    { name: 'CSS3', icon: 'bi bi-filetype-css' },  
    { name: 'JavaScript', icon: 'bi bi-filetype-js' },  
    { name: 'Git', icon: 'bi bi-git' }  
  ];  
}

Projects Page (projects.component.html)

<div class="container my-5">  
  <h2 class="mb-4">My Projects</h2>  
  <div class="row gy-4">  
    <div class="col-md-4" *ngFor="let project of projects">  
      <app-card [project]="project"></app-card>  
    </div>  
  </div>  
</div>  

 ProjectsComponent (pages/projects/projects.component.ts

import { Component } from '@angular/core';  

interface Project {  
  title: string;  
  description: string;  
  image: string;  
  link: string;  
}  

@Component({  
  selector: 'app-projects',  
  templateUrl: './projects.component.html'   ,
  standalone:false 
})  
export class ProjectsComponent {  
  projects: Project[] = [  
    {  
      title: 'Project One',  
      description: 'Description for project one.',  
      image: 'assets/img/project1.png',  
      link: 'https://example.com/project1'  
    },  
    {  
      title: 'Project Two',  
      description: 'Description for project two.',  
      image: 'assets/img/project2.png',  
      link: 'https://example.com/project2'  
    },  
    // Add more projects as needed  
  ];  
}

Contact Page (contact.component.html)
<div class="container my-5">  
  <h2>Contact Me</h2>  
  <form (ngSubmit)="onSubmit()" #contactForm="ngForm" class="row g-3">  
    <div class="col-md-6">  
      <label for="name" class="form-label">Name</label>  
      <input type="text" id="name" class="form-control" required [(ngModel)]="contact.name" name="name" />  
    </div>  
    <div class="col-md-6">  
      <label for="email" class="form-label">Email</label>  
      <input type="email" id="email" class="form-control" required [(ngModel)]="contact.email" name="email" />  
    </div>  
    <div class="col-12">  
      <label for="message" class="form-label">Message</label>  
      <textarea id="message" rows="5" class="form-control" required [(ngModel)]="contact.message" name="message"></textarea>  
    </div>  
    <div class="col-12">  
      <button type="submit" class="btn btn-primary">Send</button>  
    </div>  
  </form>  
</div>  

 ContactComponent (pages/contact/contact.component.ts)

import { Component }  from '@angular/core';  

interface Contact {  
  name: string;  
  email: string;  
  message: string;  
}  

@Component({  
  selector: 'app-contact',  
  templateUrl: './contact.component.html'  ,
  standalone:false 
})  
export class ContactComponent {  
  contact: Contact = { name: '', email: '', message: '' };  

  onSubmit() {  
    // Handle form submission logic, e.g., send email via service  
    console.log('Contact info:', this.contact);  
    // Reset form  
    this.contact = { name: '', email: '', message: '' };  
  }  
}

And also update the AppModule.ts files :
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HeaderComponent } from './shared/header/header.component';
import { FooterComponent } from './shared/footer/footer.component';
import { CardComponent } from './shared/card/card.component';
import { HomeComponent } from './pages/home/home.component';
import { AboutComponent } from './pages/about/about.component';
import { ProjectsComponent } from './pages/projects/projects.component';
import { ContactComponent } from './pages/contact/contact.component';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';

@NgModule({
  declarations: [
    AppComponent,
    HeaderComponent,
    FooterComponent,
    CardComponent,
    HomeComponent,
    AboutComponent,
    ProjectsComponent,
    ContactComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    CommonModule,
    ReactiveFormsModule,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


5. Best Practices & Tips
Component Reusability: Build generic components (Card, Button, Modal) to reuse across pages.

Routing: Use lazy loading for feature modules for faster load times.
ng generate module modules/about --route about --module app.module  

Responsive Design: Test on various screen sizes; use Bootstrap grid system (col, row, container, container-fluid).
Consistent Styling: Define theme variables in scss files for easy theme adjustments.
Accessibility: Use semantic HTML, aria labels, and ensure keyboard navigability.
Performance: Use Ahead-Of-Time (AOT) compilation, Lazy Loading, and minify CSS/JS for production.
Services: Keep HTTP logic in dedicated services; avoid direct HTTP calls in components.
State Management: Use RxJS observables and BehaviorSubjects for dynamic data updates.

6. Sample CLI Commands Summary
# Create project  
ng new portfolio-website  
cd portfolio-website  

# Add Bootstrap and Bootstrap Icons  
npm install bootstrap bootstrap-icons  

# Generate shared components  
ng generate component shared/header  
ng generate component shared/footer  
ng generate component shared/card  

# Generate feature pages  
ng generate component pages/home  
ng generate component pages/about  
ng generate component pages/projects  
ng generate component pages/contact  

# Generate feature modules with lazy loading  
ng generate module modules/about --route about --module app.module  

# Serve the app locally  
ng serve  

7. Final Tips
Keep your code clean, comment where necessary.
Use Angular best practicesâ€”services for APIs, avoid logic in templates.
Make frequent commits to version control.
Test responsiveness across devices early.
