Day 24: Build Angular Frontend – UI Components Using Angular Material

1. Setup Angular Material in Your Project

Run from your Angular CLI project root:
ng add @angular/material  

Choose:
Choose a prebuilt theme, for example: Indigo/Pink
Enable global typography styles ✔️
Enable browser animations ✔️

This sets up Angular Material, global themes, and animations.


2. Key UI Components To Build

From your plan:

Component	    Description
Header	      Navigation bar with routing links
Footer	      Social links + copyright
Button	      Reusable button with custom styles
Card	        For Projects gallery display
Contact Form	Form inputs with validation


3. Organize Shared Module (shared/shared.module.ts)
Create a shared Angular Material module for reusable Material components:

// src/app/shared/shared.module.ts  
import { NgModule } from '@angular/core';  
import { CommonModule } from '@angular/common';  

// Angular Material Modules  
import { MatToolbarModule } from '@angular/material/toolbar';  
import { MatButtonModule } from '@angular/material/button';  
import { MatIconModule } from '@angular/material/icon';  
import { MatCardModule } from '@angular/material/card';  
import { MatInputModule } from '@angular/material/input';  
import { MatFormFieldModule } from '@angular/material/form-field';  
import { MatSnackBarModule } from '@angular/material/snack-bar';  
import { MatMenuModule } from '@angular/material/menu';  
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';  

@NgModule({  
  declarations: [],  
  imports: [CommonModule],  
  exports: [  
    MatToolbarModule,  
    MatButtonModule,  
    MatIconModule,  
    MatCardModule,  
    MatInputModule,  
    MatFormFieldModule,  
    MatSnackBarModule,  
    MatMenuModule,  
    MatProgressSpinnerModule,  
    CommonModule,  
  ]  
})  
export class SharedModule { }  

4. Build Header Component (shared/header)

Create reusable header with Angular Material Toolbar and navigation links:

header.component.ts
// src/app/shared/header/header.component.ts  
import { Component } from '@angular/core';  

@Component({  
  selector: 'app-header',  
  templateUrl: './header.component.html',  
  styleUrls: ['./header.component.scss']  
})  
export class HeaderComponent { }  

header.component.html
<mat-toolbar color="primary">  
  <span class="logo">My Portfolio</span>  

  <span class="spacer"></span>  

  <nav>  
    <a mat-button routerLink="/" routerLinkActive="active" exact>Home</a>  
    <a mat-button routerLink="/about" routerLinkActive="active">About</a>  
    <a mat-button routerLink="/projects" routerLinkActive="active">Projects</a>  
    <a mat-button routerLink="/contact" routerLinkActive="active">Contact</a>  
  </nav>  
</mat-toolbar>  

header.component.scss

.logo {  
  font-size: 1.5rem;  
  font-weight: 700;  
}  

.spacer {  
  flex: 1 1 auto;  
}  

nav a.active {  
  font-weight: bold;  
  text-decoration: underline;  
}  

5. Build Footer Component (shared/footer)

footer.component.ts

import { Component } from '@angular/core';  

@Component({  
  selector: 'app-footer',  
  templateUrl: './footer.component.html',  
  styleUrls: ['./footer.component.scss']  
})  
export class FooterComponent { }  

footer.component.html

<footer>  
  <div class="footer-content">  
    <p>© 2025 Your Name. All Rights Reserved.</p>  
    <div class="social-links">  
      <a href="https://linkedin.com/in/yourprofile" target="_blank" aria-label="LinkedIn">  
        <mat-icon>linkedin</mat-icon>  
      </a>  
      <a href="mailto:youremail@example.com" aria-label="Email">  
        <mat-icon>email</mat-icon>  
      </a>  
    </div>  
  </div>  
</footer>  

footer.component.scss
footer {  
  background-color: #002d72; // Deep Blue  
  color: white;  
  padding: 1rem;  
  text-align: center;  

  .social-links a {  
    margin: 0 0.5rem;  
    color: white;  

    mat-icon {  
      font-size: 24px;  
    }  

    &:hover {  
      color: #00bfff; // Sky Blue Accent  
    }  
  }  
}  

6. Reusable Button Component (shared/button)
Optionally create wrapper component for custom buttons but Angular Material Buttons are usually enough.

Example usage in your modules:
<button mat-raised-button color="primary">Click Me</button>  

7. Projects Card Component (modules/projects/project-card.component.ts)
Create cards for project display with image and links.

project-card.component.ts
import { Component, Input } from '@angular/core';  
import { Project } from '../../models/project.model';  

@Component({  
  selector: 'app-project-card',  
  templateUrl: './project-card.component.html',  
  styleUrls: ['./project-card.component.scss']  
})  
export class ProjectCardComponent {  
  @Input() project!: Project;  
}  

project-card.component.html

<mat-card class="project-card" *ngIf="project">  
  <mat-card-header>  
    <mat-card-title>{{ project.title }}</mat-card-title>  
    <mat-card-subtitle>{{ project.subtitle }}</mat-card-subtitle>  
  </mat-card-header>  

  <img mat-card-image [src]="project.imageUrl" alt="{{project.title}}" />  

  <mat-card-content>  
    <p>{{ project.description }}</p>  
  </mat-card-content>  

  <mat-card-actions>  
    <a mat-button color="accent" *ngIf="project.link" [href]="project.link" target="_blank">View Project</a>  
    <a mat-button *ngIf="project.github" [href]="project.github" target="_blank">Source Code</a>  
  </mat-card-actions>  
</mat-card>  

project-card.component.scss

.project-card {  
  max-width: 400px;  
  margin: 1rem auto;  
}  

8. Contact Form (modules/contact/contact.component.ts)
Use Angular Reactive Forms with Angular Material inputs.

contact.component.ts

import { Component, OnInit } from '@angular/core';  
import { FormGroup, FormBuilder, Validators } from '@angular/forms';  
import { ApiService } from '../../core/services/api.service';  
import { MatSnackBar } from '@angular/material/snack-bar';  

@Component({  
  selector: 'app-contact',  
  templateUrl: './contact.component.html',  
  styleUrls: ['./contact.component.scss']  
})  
export class ContactComponent implements OnInit {  
  contactForm!: FormGroup;  
  isSubmitting = false;  

  constructor(  
    private fb: FormBuilder,  
    private api: ApiService,  
    private snackBar: MatSnackBar  
  ) { }  

  ngOnInit() {  
    this.contactForm = this.fb.group({  
      name: ['', [Validators.required]],  
      email: ['', [Validators.required, Validators.email]],  
      message: ['', [Validators.required, Validators.minLength(10)]],  
    });  
  }  

  onSubmit() {  
    if (this.contactForm.invalid) return;  

    this.isSubmitting = true;  
    this.api.sendContactForm(this.contactForm.value).subscribe({  
      next: () => {  
        this.snackBar.open('Message sent successfully!', 'Close', { duration: 3000 });  
        this.contactForm.reset();  
        this.isSubmitting = false;  
      },  
      error: (err) => {  
        this.snackBar.open('Failed to send message. Try again later.', 'Close', { duration: 3000 });  
        this.isSubmitting = false;  
      }  
    });  
  }  
}  

contact.component.html
<form [formGroup]="contactForm" (ngSubmit)="onSubmit()" class="contact-form">  
  <mat-form-field appearance="fill" class="full-width">  
    <mat-label>Name</mat-label>  
    <input matInput placeholder="Your name" formControlName="name">  
    <mat-error *ngIf="contactForm.get('name')?.invalid">Name is required</mat-error>  
  </mat-form-field>  

  <mat-form-field appearance="fill" class="full-width">  
    <mat-label>Email</mat-label>  
    <input matInput placeholder="Your email" formControlName="email">  
    <mat-error *ngIf="contactForm.get('email')?.hasError('required')">Email is required</mat-error>  
    <mat-error *ngIf="contactForm.get('email')?.hasError('email')">Enter a valid email</mat-error>  
  </mat-form-field>  

  <mat-form-field appearance="fill" class="full-width">  
    <mat-label>Message</mat-label>  
    <textarea matInput rows="5" placeholder="Your message" formControlName="message"></textarea>  
    <mat-error *ngIf="contactForm.get('message')?.invalid">Message is required (min 10 chars)</mat-error>  
  </mat-form-field>  

  <button mat-raised-button color="primary" type="submit" [disabled]="contactForm.invalid || isSubmitting">  
    Send Message  
    <mat-progress-spinner  
      *ngIf="isSubmitting"  
      diameter="20"  
      mode="indeterminate"  
      color="accent">  
    </mat-progress-spinner>  
  </button>  
</form>  

contact.component.scss

.contact-form {  
  max-width: 600px;  
  margin: 2rem auto;  
  display: flex;  
  flex-direction: column;  

  .full-width {  
    width: 100%;  
  }  

  button {  
    align-self: flex-start;  
    margin-top: 1rem;  
    position: relative;  
  
    mat-progress-spinner {  
      position: absolute;  
      top: 50%;  
      left: 75%;  
      transform: translate(-50%, -50%);  
    }  
  }  
}  

9. ApiService Method for Contact Form (core/services/api.service.ts)

import { Injectable } from '@angular/core';  
import { HttpClient } from '@angular/common/http';  
import { Observable } from 'rxjs';  
import { ContactFormDto } from '../../models/contact-form.model';  

@Injectable({  
  providedIn: 'root',  
})  
export class ApiService {  
  private baseUrl = '/api/contact';  

  constructor(private http: HttpClient) { }  

  sendContactForm(contact: ContactFormDto): Observable<any> {  
    return this.http.post(this.baseUrl, contact);  
  }  

  // Add other API calls here...  
}  

10. Key Modules and Routing Setup
Import Forms and HttpClientModule (app.module.ts or CoreModule)

import { ReactiveFormsModule } from '@angular/forms';  
import { HttpClientModule } from '@angular/common/http';  

@NgModule({  
  imports: [  
    ReactiveFormsModule,  
    HttpClientModule,  
    SharedModule,  
    // ...  
  ],  
  // ...  
})  
export class AppModule { }  
app-routing.module.ts example snippet:
typescript
const routes: Routes = [  
  { path: '', component: HomeComponent },  
  { path: 'about', component: AboutComponent },  
  { path: 'projects', component: ProjectsComponent },  
  { path: 'contact', component: ContactComponent },  
  { path: '**', redirectTo: '' }  
];  

Summary – Day 24 Deliverables
Angular Material successfully installed and configured
SharedModule created exporting Material modules
Header and Footer components with Angular Material styling and responsive Nav
Reusable Project Card component for projects gallery
Reactive Contact Form component with Material inputs, validation & submit spinner
ApiService method integrated to hit backend API for contact form
Routing between pages set up
All components ready to integrate with backend and build an awesome portfolio frontend!
