Quick Recap & Tips Before You Start Coding:

1. Project Use Case
Clear objectives with well-defined feature areas and tech stack — great foundation.

2. Folder Structure
Perfect modular approach in Angular with core/, shared/, and feature modules/.
ASP.NET Core backend well separated into Controllers, Models, Data, Services.
Keeping DB file inside /Database is neat & organized.

3. UI/UX Planning
Figma or Adobe XD is ideal to build and iterate the wireframes.
Stick to your color palette and fonts for consistent UI.
Mobile-first responsive design ensures great UX.

4. SQLite Setup
Your EF Core migration commands and DbContext config are all set.
Don’t forget to seed or test inserting some data after migration.

5. Deployment
Angular build output to ASP.NET’s /wwwroot is the standard approach.
MapFallbackToFile("index.html") is essential for SPA routing.
Testing locally with full Angular + API + DB before publishing is critical.

Best Practices Reminder:
Use Angular services to keep components lean.
Use interfaces in models/ folder for strong typing.
Keep API calls centralized in api.service.ts.
Use Angular guards (auth.guard.ts) if you later add authentication.

Some Suggestions / What to Prepare for Day 23
Define DTOs for contact form and project info — separate your Entity Models from API contracts.
Implement service interfaces and concrete classes for business logic.
Create API controllers with RESTful endpoints (GET for projects, POST for contact form submissions).
Add proper validation and error handling.
Consider adding Swagger to your ASP.NET Core backend for API testing and docs.


Day 23: Build ASP.NET Core API covering:

Entities
DTOs
Service Layer
Controllers with REST endpoints
Basic validation & error handling


Day 23: ASP.NET Core API – Full End-to-End Code Example

1. Entity Model (Models/ContactFormModel.cs)

namespace PortfolioAPI.Models  
{  
    public class ContactFormModel  
    {  
        public int Id { get; set; }  
        public string Name { get; set; }    // Required  
        public string Email { get; set; }   // Required, valid email  
        public string Message { get; set; } // Required  
        public DateTime SubmittedAt { get; set; } = DateTime.UtcNow;  
    }  
}  

2. DTOs (Models/ContactFormDto.cs)
Separate data contracts for API input/output — good practice!

namespace PortfolioAPI.Models  
{  
    public class ContactFormDto  
    {  
        public string Name { get; set; }  
        public string Email { get; set; }  
        public string Message { get; set; }  
    }  
}  

3. DbContext Update (Data/AppDbContext.cs)


Install Required Packages

In your ASP.NET Core backend:
dotnet add package Microsoft.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.Sqlite
dotnet add package Microsoft.EntityFrameworkCore.Tools

Configure SQLite in appsettings.json
{
  "ConnectionStrings": {
    "DefaultConnection": "Data Source=portfolio.db"
  }
}

using Microsoft.EntityFrameworkCore;  
using PortfolioAPI.Models;  

namespace PortfolioAPI.Data  
{  
    public class AppDbContext : DbContext  
    {        
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }  

        public DbSet<ContactFormModel> Contacts { get; set; }  

        // Optional: Seed data or configure via Fluent API here  
    }  
}  

4. Service Layer Interface (Services/IContactService.cs)

using PortfolioAPI.Models;  
using System.Threading.Tasks;  

namespace PortfolioAPI.Services  
{  
    public interface IContactService  
    {  
        Task<ContactFormModel> SaveContactFormAsync(ContactFormDto contact);  
    }  
}  

5. Service Layer Implementation (Services/ContactService.cs)
Add your business logic here, e.g., validations & save to DB.

using PortfolioAPI.Data;  
using PortfolioAPI.Models;  
using Microsoft.EntityFrameworkCore;  
using System;  
using System.Threading.Tasks;  

namespace PortfolioAPI.Services  
{  
    public class ContactService : IContactService  
    {  
        private readonly AppDbContext _db;  

        public ContactService(AppDbContext db)  
        {  
            _db = db;  
        }  

        public async Task<ContactFormModel> SaveContactFormAsync(ContactFormDto contact)  
        {  
            // Basic validation (you can improve with FluentValidation or Data Annotations)  
            if (string.IsNullOrWhiteSpace(contact.Name))  
                throw new ArgumentException("Name is required.");  

            if (string.IsNullOrWhiteSpace(contact.Email) || !contact.Email.Contains("@"))  
                throw new ArgumentException("Valid Email is required.");  

            if (string.IsNullOrWhiteSpace(contact.Message))  
                throw new ArgumentException("Message is required.");  

            var entity = new ContactFormModel  
            {  
                Name = contact.Name,  
                Email = contact.Email,  
                Message = contact.Message,  
                SubmittedAt = DateTime.UtcNow  
            };  

            _db.Contacts.Add(entity);  
            await _db.SaveChangesAsync();  

            return entity;  
        }  
    }  
}  

6. API Controller (Controllers/ContactController.cs)

using Microsoft.AspNetCore.Mvc;  
using PortfolioAPI.Models;  
using PortfolioAPI.Services;  
using System;  
using System.Threading.Tasks;  

namespace PortfolioAPI.Controllers  
{  
    [ApiController]  
    [Route("api/[controller]")]  
    public class ContactController : ControllerBase  
    {  
        private readonly IContactService _contactService;  

        public ContactController(IContactService contactService)  
        {  
            _contactService = contactService;  
        }  

        [HttpPost]  
        public async Task<IActionResult> PostContactForm([FromBody] ContactFormDto contactFormDto)  
        {  
            if (contactFormDto == null)  
                return BadRequest("Contact form data is required.");  

            try  
            {  
                var saved = await _contactService.SaveContactFormAsync(contactFormDto);  
                // Return Created status with saved entity ID and info  
                return CreatedAtAction(nameof(GetContactById), new { id = saved.Id }, saved);  
            }  
            catch (ArgumentException ex)  
            {  
                return BadRequest(new { error = ex.Message });  
            }  
            catch(Exception)  
            {  
                return StatusCode(500, "Internal server error");  
            }  
        }  

        // Optional: Retrieve contact form entry by ID  
        [HttpGet("{id}")]  
        public async Task<IActionResult> GetContactById(int id)  
        {  
            // You can add a method in IContactService to support this  
            return NotFound(); // Implement later  
        }  
    }  
}  

7. Dependency Injection Registration (Program.cs)
Modify your Program.cs to register the service:

var builder = WebApplication.CreateBuilder(args);  

builder.Services.AddControllers();  

// EF Core SQLite  
builder.Services.AddDbContext<AppDbContext>(options =>  
    options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));  

// Register your contact service  
builder.Services.AddScoped<IContactService, ContactService>();  

var app = builder.Build();  

app.UseDefaultFiles();  
app.UseStaticFiles();  

app.UseRouting();  
app.UseAuthorization();  

app.MapControllers();  

app.MapFallbackToFile("index.html");  

app.Run();  

8. Testing Your API Endpoint
Make a POST request to /api/contact with this JSON payload:

json
{  
  "name": "John Doe",  
  "email": "john@example.com",  
  "message": "Hello! I love your portfolio."  
}  
If successful, you'll get a response with HTTP 201 Created and the saved contact info.

Optional: Swagger Setup (for API testing)
Add swagger packages and enable to test endpoints easily:
dotnet add package Swashbuckle.AspNetCore  

Add to Program.cs:

builder.Services.AddEndpointsApiExplorer();  
builder.Services.AddSwaggerGen();  


var app = builder.Build();  

if (app.Environment.IsDevelopment())  
{  
    app.UseSwagger();  
    app.UseSwaggerUI();  
}  

Browse to /swagger to try API interactively.

Summary
You now have a clean, layered, well-structured backend API with:

Entity model for database
DTO for request payloads
Service layer for business logic and validation
Controller exposing RESTful POST endpoint
DI configured in Program.cs

This matches best practices and sets you up nicely for connecting your Angular frontend — for example, Angular’s api.service.ts will call POST /api/contact to submit user messages.
