You are entering Week 4 – the real fun starts now: building a full project from scratch.

Day 22: Project Planning & UI Design

Use Case Example: Portfolio Website

📅 Day 22 Plan: Project Planning & UI Design

1. 📚 Define Use Case: "Portfolio Website"

Objective:
Create a professional portfolio website to showcase:
Personal Information (Name, About, Skills)
Projects Gallery
Resume/CV Download
Contact Form (Email/Phone/LinkedIn)

Main Pages:

Page	      Purpose
Home	      Introduction + Welcome
About Me	  Skills, Experience
Projects	  List of Projects with links/images
Contact    	Contact Form (send email and Submissions saved to Database)

Core Functionalities:
Reusable Angular Components (Header, Footer, Card, etc.)
Routing between pages
API calls (simulate with fake backend)
Responsive Design (mobile-friendly)

Technology Stack:

Frontend: Angular
Backend: ASP.NET Core Web API
Database: SQLite (lightweight, file-based database)



2. 🗂️ Folder Structure (Full Project)

Good folder structure = Easy to maintain + Easy to scale!
Here’s a professional Angular folder structure:

Angular Project Structure:

src/
 ├── app/
 │    ├── core/                # Singleton services (API, Auth, Global error handling)
 │    │     ├── services/
 │    │     │    ├── api.service.ts
 │    │     │    └── auth.service.ts 
 │    │     ├── guards/
 │    │     │    └── auth.guard.ts 
 │    │     ├── interceptors/
 │    │     │    └── jwt.interceptor.ts
 │    │     └── core.module.ts
 │    │
 │    ├── shared/              # Reusable UI components
 │    │     ├── header/
 │    │     ├── footer/
 │    │     ├── button/
 │    │     └── shared.module.ts
 │    │
 │    ├── modules/             # Feature modules (pages)
 │    │     ├── home/
 │    │     ├── about/
 │    │     ├── skills/
 │    │     ├── projects/
 │    │     └── contact/
 │    │
 │    ├── models/              # Interfaces and types
 │    │     ├── project.model.ts
 │    │     └── contact-form.model.ts
 │    │
 │    ├── app-routing.module.ts# Application Routes
 │    ├── app.component.ts     # Main Application Component
 │    └── app.module.ts        # Root Angular Module
 │
 ├── assets/                   # Static files (images, JSON, etc.)
 ├── environments/             # Environment configs (dev, prod)
 ├── styles.scss               # Global styles
 └── index.html                 # Root HTML file

ASP.NET Core Project Structure: 

/Controllers/
 ├── HomeController.cs         # Handles static page routing
 ├── ContactController.cs      # API endpoint for contact form submissions and email sendings

/Models/
 ├── ContactFormModel.cs        # Entity Model for SQLite

/Data/
 ├── AppDbContext.cs            # Entity Framework Core Context

/Migrations/
 ├── (Entity Framework Migrations)

/Services/
 ├── EmailService.cs            # For sending emails from Contact Form

/wwwroot/
 ├── (Angular built files will be here)

/Database/
 ├── portfolio.db               # SQLite database file

Program.cs                      # Application Startup Code
appsettings.json                # App Configuration (ConnectionStrings etc.)
appsettings.Development.json    # Dev-specific configurations 


📌 Notes on this Structure:

Angular is now properly modularized (Core, Shared, Modules, Models).
ASP.NET Core project has a clear separation (Controllers, Models, Data, Services).
SQLite database portfolio.db is included under a /Database/ folder for clean management.
Deployment-ready: Angular builds to /wwwroot, APIs and DB handled by ASP.NET backend.


3. 🎨 UI/UX Layout Planning

Wireframe Design:
Tools: Figma, Adobe XD, or simple paper sketch.

Example Layout:

Simple Layout Idea:

---------------------------------------
|                HEADER               |
|           ( Navigation Bar)         |
|  Logo | Home About Projects Contact |
|-------------------------------------|
|            PAGE CONTENT             |
|                                     |
|-------------------------------------|
|              FOOTER                 |
|         Copyright © 2025            |
--------------------------------------

Header: Navigation menu
Footer: Social links, copyright
Page Content: Changes based on route (<router-outlet>)

Color Theme:
Primary Color: Deep Blue
Accent Color: Sky Blue
Text: Dark Gray / White

Typography:
Main font: 'Poppins' or 'Roboto'


4. 🗄️ Database Setup (SQLite Integration)

4.1 Install Required Packages

In your ASP.NET Core backend:
dotnet add package Microsoft.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.Sqlite
dotnet add package Microsoft.EntityFrameworkCore.Tools

4.2 Configure SQLite in appsettings.json
{
  "ConnectionStrings": {
    "DefaultConnection": "Data Source=portfolio.db"
  }
}

4.3 Setup DbContext (AppDbContext.cs)

using Microsoft.EntityFrameworkCore;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) {}

    public DbSet<ContactFormModel> Contacts { get; set; }
}

4.4 Register DbContext in Program.cs

builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));

4.5 Create ContactForm Model
public class ContactFormModel
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
    public string Message { get; set; }
}

4.6 Migrate the Database
dotnet ef migrations add InitialCreate
dotnet ef database update

✅ This will create a portfolio.db file in your project!

5. 🚀 Deployment Setup (Angular + ASP.NET Core + SQLite in Single Publish)

5.1 Build Angular Frontend for Production
ng build --configuration production

This generates the production files inside /dist/your-project-name/.

5.2 Copy Angular Build Files to ASP.NET Core
Copy the contents inside dist/your-project-name/

Paste into wwwroot/ of your ASP.NET Core project.

5.3 Configure ASP.NET Core to Serve Angular + API

Modify Program.cs:

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));

var app = builder.Build();

app.UseDefaultFiles();
app.UseStaticFiles();

app.UseRouting();
app.UseAuthorization();
app.MapControllers();
app.MapFallbackToFile("index.html");

app.Run();

5.4 Publish Combined Project

In Visual Studio:

Right-click ASP.NET Core Project → Publish

Choose a Folder or FTP (for Somee hosting)

Set Configuration to Release

Publish

The publish output will now include:

Angular Frontend (inside wwwroot)

ASP.NET Core APIs

SQLite database file (portfolio.db)

5.5 Deploy to Somee Hosting
Upload your publish folder (including portfolio.db) to Somee File Manager or via FTP

Configure the correct Application Pool (.NET 6/7/8)

Your full website (Angular + API + SQLite DB) will be LIVE 🎉

⚡ Final Deliverables for Day 22
✅ Project Use Case Document
✅ Basic UI Wireframe
✅ Folder Structure Prepared
✅ SQLite Database Integrated
✅ FullStack Deployment Setup (Single Publish)
✅ Local Testing + Deployment Ready


📢 Best Practices for Day 22:

🧹 Plan your folder structure before writing code.
🎨 Prepare UI sketches or Figma screens for faster development.
🛡️ Keep a core and shared folder separation.
🚦 Setup routing from day 1.
🧩 Reuse components like Header, Footer, Button.
📈 Keep services slim and clean (no direct HTTP in components).

✅ Summary of Day 22:

Topic	Status
Project Use Case Defined	✅
Folder Structure Designed	✅
UI/UX Rough Design Done	✅
Technologies Decided	✅
Setup Checklist Ready	✅
