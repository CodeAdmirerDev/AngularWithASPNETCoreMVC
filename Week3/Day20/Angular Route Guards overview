Let’s explore Angular Route Guards, specifically CanActivate, and how you can use them effectively in your applications. 
We’ll cover the concepts, implementation steps, best practices, and provide a sample project.

What are Angular Route Guards?
Angular Route Guards are a feature that allows you to control access to routes in your application. 
They can help implement authentication and authorization by preventing or allowing navigation to a particular route based on certain conditions.

Types of Route Guards

CanActivate:        Decides if a user can navigate to a route.
CanActivateChild:   Decides if a user can navigate to child routes.
CanDeactivate:      Decides if a user can leave a route.
Resolve:            Fetches data before the route is activated.
CanLoad:            Checks if a module can be loaded.


Detailed Information on CanActivate
The CanActivate guard can be used to ensure that a user is authenticated (or authorized) before allowing them to access a route. 
It returns a boolean or a Promise<boolean>/Observable<boolean>, indicating whether navigation to the requested route should be allowed.

AuthService Logic
AuthService is typically used in conjunction with CanActivate to manage authentication. 
It should have methods to log in, log out, and check if a user is authenticated.

Step-by-step Process to Implement CanActivate

Set Up Angular Project: Start with a new Angular project.

ng new route-guard-example  --no-nonstandalone
cd route-guard-example  

Generate AuthService: Create an authentication service that will manage user sessions.

ng generate service services/auth  

Implement AuthService: Add methods like isAuthenticated to check user authentication states.

// auth.service.ts  
import { Injectable } from '@angular/core';  

@Injectable({  
  providedIn: 'root',  
})  
export class AuthService {  
  private isLoggedIn = false;  

  login() {  
    this.isLoggedIn = true;  
  }  
  
  logout() {  
    this.isLoggedIn = false;  
  }  
  
  isAuthenticated(): boolean {  
    return this.isLoggedIn;  
  }  
}  

Generate CanActivate Guard: Create a guard using Angular CLI.

ng generate guard guards/auth  

Implement CanActivate Logic:

// auth.guard.ts  
import { Injectable } from '@angular/core';  
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';  
import { AuthService } from '../services/auth.service';  

@Injectable({  
  providedIn: 'root',  
})  
export class AuthGuard implements CanActivate {  
  constructor(private authService: AuthService, private router: Router) {}  

  canActivate(  
    route: ActivatedRouteSnapshot,  
    state: RouterStateSnapshot  
  ): boolean {  
    if (this.authService.isAuthenticated()) {  
      return true;  
    } else {  
      this.router.navigate(['/login']);  
      return false;  
    }  
  }  
}  

Create Components: Generate home and login components.

ng generate component home  
ng generate component login  

Implement Login and Home Components:

// login.component.ts  
import { Component } from '@angular/core';  
import { AuthService } from '../services/auth.service';  
import { Router } from '@angular/router';  

@Component({  
  selector: 'app-login',  
  template: `  
    <button (click)="login()">Login</button>  
  `,  
})  
export class LoginComponent {  
  constructor(private authService: AuthService, private router: Router) {}  

  login() {  
    this.authService.login();  
    this.router.navigate(['/home']);  
  }  
}  

// home.component.ts  
import { Component } from '@angular/core';  

@Component({  
  selector: 'app-home',  
  template: `<h2>Home</h2>`,  
})  
export class HomeComponent {}  




Define Routes: Use the guard in your routing module.

// app-routing.module.ts  
import { NgModule } from '@angular/core';  
import { RouterModule, Routes } from '@angular/router';  
import { HomeComponent } from './home/home.component';  
import { LoginComponent } from './login/login.component';  
import { AuthGuard } from './guards/auth.guard';  

const routes: Routes = [  
  { path: 'home', component: HomeComponent, canActivate: [AuthGuard] },  
  { path: 'login', component: LoginComponent },  
  { path: '', redirectTo: '/login', pathMatch: 'full' },  
];  

@NgModule({  
  imports: [RouterModule.forRoot(routes)],  
  exports: [RouterModule],  
})  
export class AppRoutingModule {}  




Here is the all Angular Route Guards Overview:

There are 4 types of route guards in Angular:
CanActivate
CanActivateChild
CanDeactivate
CanLoad

Angular also has Resolve which is not exactly a guard, but often related as it loads data before activating a route.

1. CanActivate Guard
Used to prevent unauthorized users from accessing a route.

Use case
Restrict routes unless the user is logged in.

Implementation
auth.service.ts (stub auth service)

import { Injectable } from '@angular/core';  

@Injectable({ providedIn: 'root' })  
export class AuthService {  
  isLoggedIn(): boolean {  
    return !!localStorage.getItem('token');  
  }  
}  

auth.guard.ts

import { Injectable } from '@angular/core';  
import { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';  
import { Observable } from 'rxjs';  
import { AuthService } from './auth.service';  

@Injectable({ providedIn: 'root' })  
export class AuthGuard implements CanActivate {  
  constructor(private authService: AuthService, private router: Router) {}  

  canActivate(  
    route: ActivatedRouteSnapshot,  
    state: RouterStateSnapshot  
  ): boolean | UrlTree {  
    if (this.authService.isLoggedIn()) {  
      return true;  
    }  
    return this.router.parseUrl('/login');  
  }  
}  

app-routing.module.ts
import { NgModule } from '@angular/core';  
import { RouterModule, Routes } from '@angular/router';  

import { AuthGuard } from './auth.guard';  

const routes: Routes = [  
  {  
    path: 'dashboard',  
    component: DashboardComponent,  
    canActivate: [AuthGuard]  
  },  
  { path: 'login', component: LoginComponent }  
];  

@NgModule({  
  imports: [RouterModule.forRoot(routes)],  
  exports: [RouterModule]  
})  
export class AppRoutingModule {}  

2. CanActivateChild Guard
Restricts access to child routes if parent condition fails.

Use case
Protect child routes of an admin panel.

Implementation
admin.guard.ts

import { Injectable } from '@angular/core';  
import { CanActivateChild, Router } from '@angular/router';  
import { AuthService } from './auth.service';  

@Injectable({ providedIn: 'root' })  
export class AdminGuard implements CanActivateChild {  
  constructor(private authService: AuthService, private router: Router) {}  

  canActivateChild(): boolean {  
    if (this.authService.isLoggedIn() && this.authService.userHasRole('admin')) {  
      return true;  
    }  
    this.router.navigate(['/']);  
    return false;  
  }  
}  

app-routing.module.ts

const routes: Routes = [  
  {  
    path: 'admin',  
    component: AdminComponent,  
    canActivateChild: [AdminGuard],  
    children: [  
      { path: 'users', component: UsersComponent },  
      { path: 'settings', component: SettingsComponent }  
    ]  
  }  
];  

3. CanDeactivate Guard
Prevents navigation away from a page if there are unsaved changes.

Use case
Warning users about unsaved form data.

Implementation
can-deactivate.guard.ts

import { Injectable } from '@angular/core';  
import { CanDeactivate } from '@angular/router';  
import { Observable } from 'rxjs';  

export interface CanComponentDeactivate {  
  canDeactivate: () => boolean | Observable<boolean>;  
}  

@Injectable({ providedIn: 'root' })  
export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {  
  canDeactivate(  
    component: CanComponentDeactivate  
  ): boolean | Observable<boolean> {  
    return component.canDeactivate ? component.canDeactivate() : true;  
  }  
}  

In your component:

export class EditProfileComponent implements CanComponentDeactivate {  
  formDirty = false;  

  canDeactivate(): boolean {  
    if (this.formDirty) {  
      return confirm('You have unsaved changes! Do you really want to leave?');  
    }  
    return true;  
  }  
}  

Register guard:

const routes: Routes = [  
  {  
    path: 'edit-profile',  
    component: EditProfileComponent,  
    canDeactivate: [CanDeactivateGuard]  
  }  
];  

4. CanLoad Guard
Prevents loading entire lazy-loaded modules if condition doesn’t match.

Use case
Not load admin module if user is not admin.

Implementation
can-load.guard.ts

import { Injectable } from '@angular/core';  
import { CanLoad, Route, UrlSegment, Router } from '@angular/router';  
import { AuthService } from './auth.service';  

@Injectable({ providedIn: 'root' })  
export class CanLoadGuard implements CanLoad {  
  constructor(private authService: AuthService, private router: Router) {}  

  canLoad(route: Route, segments: UrlSegment[]): boolean {  
    if (this.authService.isLoggedIn() && this.authService.userHasRole('admin')) {  
      return true;  
    }  
    this.router.navigate(['/']);  
    return false;  
  }  
}  

Usage in routing:

const routes: Routes = [  
  {  
    path: 'admin',  
    loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule),  
    canLoad: [CanLoadGuard]  
  }  
];  

Summary Table

Guard	Interface	      Use Case	                                              When Invoked
CanActivate	          CanActivate	Protect route access	                      Before activating route
CanActivateChild	    CanActivateChild	Protect child routes	                Before activating child routes
CanDeactivate	        CanDeactivate	Prevent leaving with unsaved changes	    Before leaving current route
CanLoad	              CanLoad	Prevent loading lazy modules                  	Before lazy loading module

Best Practices

Angular CLI: Use Angular CLI for generating services, components, and guards—it follows Angular best practices.
Dependency Injection: Leverage Angular's dependency injection for services to maintain loose coupling.
User Feedback: Implement feedback mechanisms for users (like loading indicators, error messages) during authentication.
Route Configuration: Keep routes modular and organized, especially in larger applications.
Lazy Loading: For larger applications, consider lazy loading modules to reduce the initial load time.

Sample Project Use Cases
Multi-role Application: If you have different user roles (Admin, User), you can enhance your guard logic to evaluate user roles for access to specific routes.
Subscription Services: Use CanActivate to check if a user has an active subscription before accessing premium content.
Data Fetching: Utilize the Resolve guard to fetch data before rendering a component, ensuring data is available on initial load.

Final Thoughts
By mastering route guards like CanActivate, you can enhance your Angular applications' security and user experience. 
The sample project above provides a solid foundation, and from here, you can build more complex navigation and access control logic to meet your application’s needs.
