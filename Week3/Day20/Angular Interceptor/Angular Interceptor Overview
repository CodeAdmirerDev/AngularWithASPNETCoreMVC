What is an Angular Interceptor?
An Angular Interceptor is a service that allows you to intercept and modify HTTP requests and responses globally. 

Interceptors provide a way to handle tasks such as:

Adding authentication tokens to requests (JWT, for example).
Handling global error messages or API response errors.
Modifying request headers.
Adding global request retries.
Logging requests and responses for debugging.

Interceptors are useful for performing actions before a request is sent or after a response is received. 
For example, you can use interceptors to add authentication tokens to each HTTP request or to handle errors that occur during API calls.

Types of Interceptors:

Request Interceptor:
Modify HTTP requests before they are sent to the server.

Common use case: Add headers (e.g., authentication tokens).

Response Interceptor:
Modify or handle the response after the server sends the data back.
Common use case: Handle errors globally or parse/transform the response.

Error Handling:
Interceptors allow you to catch HTTP errors globally, so you can centralize your error handling.

Detailed Step-by-Step Guide to Become a Beginner to Expert in Angular Interceptors:

Step 1: Understand the Basics of Angular HTTP Client

Before diving into interceptors, you should be familiar with Angular's HttpClientModule. 
It is used to make HTTP requests and handle responses.

HttpClientModule is a part of Angular's @angular/common/http package.

Install HttpClientModule in your AppModule.

import { HttpClientModule } from '@angular/common/http';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, HttpClientModule],
  bootstrap: [AppComponent]
})
export class AppModule {}

Step 2: Create an HTTP Interceptor

An interceptor is a class that implements HttpInterceptor interface. 
This interface has a method intercept() that gives you access to the outgoing request and the incoming response.

Interceptor Example:

import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { throwError } from 'rxjs';

@Injectable()
export class JwtInterceptor implements HttpInterceptor {

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    // Add authorization header with JWT token
    const authToken = localStorage.getItem('jwt_token');
    if (authToken) {
      req = req.clone({
        setHeaders: {
          Authorization: `Bearer ${authToken}`
        }
      });
    }

    return next.handle(req).pipe(
      catchError(error => {
        // Handle error responses globally
        if (error.status === 401) {
          console.log('Unauthorized access - Redirecting to login');
        }
        return throwError(error);
      })
    );
  }
}

HttpRequest: Represents the request object. You can modify it using the clone() method.

HttpHandler: Handles the request after it has been modified.

HttpEvent: Represents the HTTP response.

catchError: Allows you to catch errors and handle them globally.

Step 3: Register the Interceptor

To use the interceptor globally in your Angular application, you need to register it in the AppModule.

AppModule Example:

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { JwtInterceptor } from './jwt.interceptor';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, HttpClientModule],
  providers: [
    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true }
  ],
  bootstrap: [AppComponent]
})
export class AppModule {}


In this example:

The HTTP_INTERCEPTORS is used to provide the JwtInterceptor.

The multi: true option ensures that Angular allows multiple interceptors.

Step 4: Error Handling with Interceptors
One of the main uses of interceptors is to handle errors globally. 
Instead of handling errors in every HTTP request, you can centralize error handling in the interceptor.

In the catchError() function of the interceptor, you can implement logic to handle different types of HTTP errors, such as:

401 Unauthorized: When authentication fails, you can redirect the user to the login page.

404 Not Found: When the requested resource is not available.

500 Internal Server Error: When there is a server issue.

Step 5: Best Practices for Angular Interceptors

Do Not Modify the Request In-Place: Always clone the request and then modify it using the clone() method. 
Angular requests are immutable, and modifying them directly could lead to unexpected behavior.

req = req.clone({
  setHeaders: {
    Authorization: `Bearer ${authToken}`
  }
});

Handle Errors Gracefully: Always handle errors globally using interceptors to reduce duplication and make your code cleaner.

Separate Concerns: Keep different interceptors for different tasks (e.g., one for authentication and another for logging).

Use Interceptors for Caching and Retry Logic: Use interceptors to add custom caching or retry mechanisms when making HTTP requests to optimize network usage.

Unsubscribe from Observables: Avoid memory leaks by unsubscribing from the Observables within your interceptors when necessary (use take(1) or async pipe in templates).


Sample Project Code: Angular + JWT Interceptor Example


üõ†Ô∏è Full Project: jwt-interceptor-demo

1. Create Angular App:
ng new jwt-interceptor-demo --no-standalone
cd jwt-interceptor-demo

2. Install Dependencies (if not already):
npm install


3. Create jwt.interceptor.ts:

// src/app/jwt.interceptor.ts
import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';

@Injectable()
export class JwtInterceptor implements HttpInterceptor {
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    // Get the JWT token from localStorage
    const token = localStorage.getItem('token');

    // Clone the request and attach Authorization header if token exists
    if (token) {
      req = req.clone({
        setHeaders: {
          Authorization: `Bearer ${token}`
        }
      });
    }

    // Handle errors globally
    return next.handle(req).pipe(
      catchError((error: HttpErrorResponse) => {
        if (error.status === 401) {
          console.error('Unauthorized! Redirect to login.');
          // Example: redirect to login
          window.location.href = '/login'; // Replace with router.navigate if you have Router
        }
        return throwError(() => error);
      })
    );
  }
}

4. Update app.module.ts:

// src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { AppComponent } from './app.component';
import { JwtInterceptor } from './jwt.interceptor'; // <- import the interceptor

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule
  ],
  providers: [
    {
      provide: HTTP_INTERCEPTORS,
      useClass: JwtInterceptor,
      multi: true
    }
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }


5. Create api.service.ts:

// src/app/api.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private apiUrl = 'https://jsonplaceholder.typicode.com'; // fake API for demo

  constructor(private http: HttpClient) {}

  getData(): Observable<any> {
    return this.http.get<any>(`${this.apiUrl}/posts`);
  }
}

6. Update app.component.ts:

// src/app/app.component.ts
import { Component, OnInit } from '@angular/core';
import { ApiService } from './api.service';

@Component({
  selector: 'app-root',
  template: `
    <h1>Data from API</h1>
    <pre>{{ data | json }}</pre>
  `
})
export class AppComponent implements OnInit {
  data: any;

  constructor(private apiService: ApiService) {}

  ngOnInit(): void {
    // Just for testing, let's save a fake token
    localStorage.setItem('token', 'fake-jwt-token');

    this.apiService.getData().subscribe({
      next: (response) => {
        this.data = response;
      },
      error: (err) => {
        console.error('API Error:', err);
      }
    });
  }
}

‚úÖ Now your project structure looks like:

src/
 ‚îú‚îÄ‚îÄ app/
 ‚îÇ    ‚îú‚îÄ‚îÄ api.service.ts
 ‚îÇ    ‚îú‚îÄ‚îÄ app.component.ts
 ‚îÇ    ‚îú‚îÄ‚îÄ app.module.ts
 ‚îÇ    ‚îú‚îÄ‚îÄ jwt.interceptor.ts
 ‚îÇ
 ‚îú‚îÄ‚îÄ index.html
 ‚îú‚îÄ‚îÄ main.ts
 ‚îú‚îÄ‚îÄ ...

üöÄ When you run:
ng serve

Angular will automatically attach JWT token to every API request

If a 401 Unauthorized error occurs, it will redirect to login page (you can improve this later using Angular Router)

üß† Real-World Use Cases of Interceptors:

Use Case	          Example
Attach Token	      Automatically attach Authorization token to every request
Global Error        Handling	Handle 401, 403, 500 status globally
API Logging	        Log all outgoing requests and responses for debugging
Modify Requests	    Add custom headers like timezone, language preference
Retry Logic        	Retry a failed API call before throwing error

üåü Best Practices for JWT Interceptor:

Keep Token Securely:   Prefer Angular Services or Secure Cookies over LocalStorage in production.
Handle Token Expiry:   Use refresh tokens if your server supports it.
Global Error Handling: Always catch and manage errors inside the interceptor.
Modularize Code:       Create separate services for Auth, Token management.
Avoid Hardcoded URLs:  Use environment.ts files to manage API base URLs.

üî• Bonus Improvement:
If you want, I can also show you how to:

Protect routes with AuthGuard
Auto logout user if token expired
Use environment variables for API URL

Real API integration with .NET backend instead of jsonplaceholder!


Use Cases for Interceptors:

Authentication:
Automatically attach JWT tokens to requests.
Handle token expiration or unauthorized access errors.

Logging:
Log HTTP requests and responses for debugging purposes.

Error Handling:
Handle common errors (401, 404, 500) globally, improving user experience.

Caching:
Cache successful responses to avoid redundant network requests.

Custom Headers:
Attach custom headers (e.g., content-type, language, etc.) to every request.

Conclusion:
By following the above steps, you can become proficient in using Angular interceptors to manage HTTP requests, handle errors,
and apply best practices in real-world applications. Implementing JWT authentication, error handling, 
and logging with interceptors will improve the structure and maintainability of your code. 
You can apply these concepts in a real-world Angular project to create a secure and well-optimized full-stack application.
