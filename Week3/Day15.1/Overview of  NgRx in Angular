Let’s break this down systematically to guide you from a beginner to an advanced level in NgRx with Angular 19 (non-standalone app). 

I'll cover:
Basic concepts (Redux, State, Actions, Reducers, Selectors, Effects)
Step-by-step setup instructions
Best practices
Sample project code for a comprehensive understanding
Use case example in Angular 19


1. What is Redux?
Redux is a predictable state container for JavaScript applications. It helps manage the app's state in a single immutable store, making the app state more manageable, testable, and consistent.

Key ideas:
Single source of truth (store)
State is read-only (actions trigger state changes)
Changes are made via pure functions called reducers


2. Core NgRx Concepts (Redux adapted for Angular)

a. State
The application's source of truth — stored in an immutable object. Think of it as a store that holds all your app data.

b. Actions
Objects describing “what happened”. They are dispatched to signal intent, e.g., fetch data, add item.

c. Reducers
Pure functions that handle actions and update the state accordingly. They take current state and action, and return the new state.

d. Selectors
Functions to select and derive slices of the state efficiently.

e. Effects
Handle side effects, such as asynchronous operations (e.g., HTTP calls). They listen for specific actions, perform tasks, then dispatch new actions.


3. Install and set up NgRx in Angular 19 (non-standalone)

Step-by-step process:

1. Create a new Angular project (if needed):

ng new ngrx-demo --routing --strict  
cd ngrx-demo  

2. Install NgRx dependencies:
npm install @ngrx/store @ngrx/effects @ngrx/store-devtools  

3. Set up the Store module:

In app.module.ts:
import { NgModule } from '@angular/core';  
import { BrowserModule } from '@angular/platform-browser';  
import { StoreModule } from '@ngrx/store';  
import { EffectsModule } from '@ngrx/effects';  
import { StoreDevtoolsModule } from '@ngrx/store-devtools';  

@NgModule({  
  declarations: [  
    // your components  
  ],  
  imports: [  
    BrowserModule,  
    StoreModule.forRoot({}, {}), // add your reducers later  
    EffectsModule.forRoot([]), // add effects here  
    StoreDevtoolsModule.instrument({ maxAge: 25 })  
  ],  
  providers: [],  
  bootstrap: [/* your main component */]  
})  
export class AppModule { }  

4. Define State, Actions, Reducers, Selectors, Effects

4. Building Blocks - Detailed
a. State 
Create interfaces describing parts of the app’s state.

export interface AppState {  
  counter: number;  
}  

b. Actions
Define action types and creators (use createAction):

import { createAction } from '@ngrx/store';  

export const increment = createAction('[Counter] Increment');  
export const decrement = createAction('[Counter] Decrement');  
export const reset = createAction('[Counter] Reset');  

c. Reducers
Use createReducer:

import { createReducer, on } from '@ngrx/store';  
import { increment, decrement, reset } from './counter.actions';  

export const initialState = 0;  

export const counterReducer = createReducer(  
  initialState,  
  on(increment, (state) => state + 1),  
  on(decrement, (state) => state - 1),  
  on(reset, () => 0)  
);  

Register in store:

import { StoreModule } from '@ngrx/store';  
import { counterReducer } from './counter.reducer';  

@NgModule({  
  imports: [  
    StoreModule.forRoot({ count: counterReducer }),  
  ],  
})  
export class AppModule { }  

d. Selectors
Create memoized selectors:

import { createSelector, createFeatureSelector } from '@ngrx/store';  

export const selectCounter = createFeatureSelector<number>('count');  

export const selectCounterValue = createSelector(  
  selectCounter,  
  (state: number) => state  
);  

e. Effects
Handle async operations like fetching data:

import { Injectable } from '@angular/core';  
import { Actions, createEffect, ofType } from '@ngrx/effects';  
import { of } from 'rxjs';  
import { switchMap, catchError, map } from 'rxjs/operators';  
import { loadDataSuccess, loadDataFailure } from './data.actions';  

@Injectable()  
export class DataEffects {  
  loadData$ = createEffect(() =>  
    this.actions$.pipe(  
      ofType('[Data] Load'),  
      switchMap(() =>  
        // simulate API call  
        of({ data: 'sample data' }).pipe(  
          map(response => loadDataSuccess({ data: response.data })),  
          catchError(() => of(loadDataFailure()))  
        )  
      )  
    )  
  );  

  constructor(private actions$: Actions) {}  
}  


Register effects:
EffectsModule.forRoot([DataEffects])  

5. Best practices:

Use feature modules for organizing state slices.
Keep effects pure and handle errors.
Use selectors for efficient data retrieval.
Normalize complex data structures.
Keep reducers pure and small.
Use NgRx createAction and createReducer for clarity.
Use devtools during development for debugging.


6. Sample minimal project outline (counter example)

counter.actions.ts:

import { createAction } from '@ngrx/store';  

export const increment = createAction('[Counter] Increment');  
export const decrement = createAction('[Counter] Decrement');  
export const reset = createAction('[Counter] Reset');  

counter.reducer.ts:

import { createReducer, on } from '@ngrx/store';  
import { increment, decrement, reset } from './counter.actions';  

export const initialState = 0;  

export const counterReducer = createReducer(  
  initialState,  
  on(increment, state => state + 1),  
  on(decrement, state => state - 1),  
  on(reset, () => 0)  
);  

counter.selectors.ts:

import { createFeatureSelector, createSelector } from '@ngrx/store';  

export const selectCounter = createFeatureSelector<number>('counter');  
export const selectCounterValue = createSelector(  
  selectCounter,  
  state => state  
);  


app.module.ts:
// import statements  
imports: [  
  BrowserModule,  
  StoreModule.forRoot({ counter: counterReducer }),  
  StoreDevtoolsModule.instrument({ maxAge: 25 }),  
]  

counter.component.ts:
import { Component } from '@angular/core';  
import { Store } from '@ngrx/store';  
import { increment, decrement, reset } from './counter.actions';  
import { selectCounterValue } from './counter.selectors';  

@Component({  
  selector: 'app-counter',  
  template: `  
    <h1>Counter: {{ counter$ | async }}</h1>  
    <button (click)="increment()">Increment</button>  
    <button (click)="decrement()">Decrement</button>  
    <button (click)="reset()">Reset</button>  
  `  
})  

export class CounterComponent {  
  counter$ = this.store.select(selectCounterValue);  

  constructor(private store: Store) {}  

  increment() { this.store.dispatch(increment()); }  
  decrement() { this.store.dispatch(decrement()); }  
  reset() { this.store.dispatch(reset()); }  
}  

7. Use Cases in Angular 19 (Non-Standalone App)
State management for large applications with complex data flows.
Authentication status handling.
Product catalog management.
Form state handling.
Real-time data updates with Effects.

Wrap Up & Next Steps:
Start with small apps focusing on core concepts.
Practice creating actions, reducers, selectors, effects.
Gradually implement features like async data, error handling.
Use developer tools frequently.
Explore advanced topics like feature modules, router integration, lazy loading
