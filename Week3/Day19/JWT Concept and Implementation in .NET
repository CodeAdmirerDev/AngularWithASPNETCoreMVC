Here's a detailed guide for Day 19: Authentication (Basics) with a focus on JWT (JSON Web Token) including its concept, implementation, 
token generation in .NET, and a complete step-by-step learning path from beginner to expert. 
I'll also provide best practices, use cases, and sample code for a working .NET project.


Day 19: Authentication (Basics) - JWT Concept and Implementation in .NET

1. What is JWT?
JWT (JSON Web Token) is a compact, URL-safe way of representing claims to be transferred between two parties. 
It is commonly used for authentication & authorization in modern web apps.

Key features of JWT:
Self-contained token: JWT contains all necessary info about the user and claims, eliminating the need for server state checks.
Compact: Encoded as three Base64Url parts - Header, Payload, Signature.
Stateless authentication: The server validates the token without needing to store session data.

JWT Structure:
[Header].[Payload].[Signature]  

Header: Metadata, e.g., algorithm used (HS256).
Payload: User info and claims (user ID, roles, permissions).
Signature: To verify token integrity (using a secret key).

2. JWT Authentication Flow
Client logs in with credentials (username/password).
Server validates credentials.
Server generates JWT token containing user claims, signs it.
Server returns JWT to client.
Client stores JWT (usually local storage or memory).
For future requests, client sends JWT in HTTP Authorization header Bearer <token>.
Server middleware validates JWT, authorizes access.

3. Implementing JWT Authentication in .NET

Step-by-step process:
Beginner
Learn JWT basics and claims.
Understand how to generate a token using a secret key.
Configure JWT authentication middleware in ASP.NET Core.
Protect endpoints with [Authorize] attribute.
Understand how the token travels in requests (Authorization header).

Intermediate
Add claims like roles to tokens.
Use refresh tokens to renew expired tokens.
Configure token expiration & validation parameters.
Learn to decode and validate tokens.
Add role or policy based authorization.

Advanced
Implement refresh token rotations and revoke on logout.
Use asymmetric keys (RSA) for signing tokens.
Integrate with third-party authentication providers (OAuth, OpenID Connect).
Store tokens securely on client-side.
Handle token blacklisting for logout.
Implement IdentityServer or other full-featured Identity Providers.

4. Best Practices
Use HTTPS exclusively to protect tokens from interception.
Keep your signing keys secret and secure.
Set reasonable expiry times (e.g., 15 mins access tokens).
Use refresh tokens to avoid frequently asking users to login.
Add scopes/claims sparingly â€” only what you need.
Validate tokens on every request, including issuer and audience.
Avoid storing JWT in local storage if possible (security risk: XSS).
Implement proper token revocation mechanisms (refresh token revocation).
Use [Authorize] attribute to secure endpoints.
Log authentication failures for auditing.

5. Use Cases of JWT
SPA Authentication: Secure Single Page Applications using JWT tokens.
REST APIs: Stateless authorization for APIs.
Microservices: Transmit user identity securely across services.
Mobile apps: Authorize API calls securely.
Third-party APIs: Provide secure delegated access through JWT.


Sample Project: ASP.NET Core Web API with JWT Authentication

Technologies: 

.NET 6,7 or 8
ASP.NET Core Web API
In-memory user store for demo
JWT Bearer Authentication

Step 1: Setup New ASP.NET Core Web API
dotnet new webapi -o JwtAuthDemo  
cd JwtAuthDemo  

Step 2: Add NuGet Package for JWT Authentication
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer  

Step 3: Program.cs (Configure services and middleware)
using Microsoft.AspNetCore.Authentication.JwtBearer;  
using Microsoft.IdentityModel.Tokens;  
using System.Text;  

var builder = WebApplication.CreateBuilder(args);  

// JWT configuration values (move to appsettings for real apps)  
var jwtKey = "ThisIsASecretKeyForJwtAuthDemo1234!"; // Your secret  
var issuer = "JwtAuthDemoIssuer";  
var audience = "JwtAuthDemoAudience";  

// Add Authentication services  
builder.Services.AddAuthentication(options =>  
{  
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;  
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;  
})  
.AddJwtBearer(options =>  
{  
    options.TokenValidationParameters = new TokenValidationParameters  
    {  
        ValidateIssuer = true,  
        ValidIssuer = issuer,  

        ValidateAudience = true,  
        ValidAudience = audience,  

        ValidateIssuerSigningKey = true,  
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtKey)),  

        ValidateLifetime = true,  
        ClockSkew = TimeSpan.Zero  // No tolerance for token expiration  
    };  
});  

builder.Services.AddAuthorization();  
builder.Services.AddControllers();  

var app = builder.Build();  

app.UseRouting();  

// Enable authentication & authorization middleware  
app.UseAuthentication();  
app.UseAuthorization();  

app.MapControllers();  

app.Run();  

Step 4: Create a simple User model

public class User  
{  
    public string Username { get; set; }  
    public string Password { get; set; }  // In real app, store hashed passwords!  
    public string Role { get; set; }  
}  

Step 5: Create Authentication Controller
using Microsoft.AspNetCore.Mvc;  
using Microsoft.IdentityModel.Tokens;  
using System.IdentityModel.Tokens.Jwt;  
using System.Security.Claims;  
using System.Text;  

[ApiController]  
[Route("[controller]")]  
public class AuthController : ControllerBase  
{  
    // Mock user database  
    private List<User> users = new List<User>  
    {  
        new User { Username = "alice", Password = "password123", Role = "Admin" },  
        new User { Username = "bob", Password = "password123", Role = "User" }  
    };  

    private readonly IConfiguration _configuration;  

    public AuthController(IConfiguration configuration)  
    {  
        _configuration = configuration;  
    }  

    [HttpPost("login")]  
    public IActionResult Login([FromBody] User login)  
    {  
        var user = users.SingleOrDefault(u => u.Username == login.Username && u.Password == login.Password);  

        if (user == null) return Unauthorized("Invalid credentials");  

        var token = GenerateJwtToken(user);  

        return Ok(new { token });  
    }  

    private string GenerateJwtToken(User user)  
    {  
        var jwtKey = _configuration["JwtKey"] ?? "ThisIsASecretKeyForJwtAuthDemo1234!";  
        var issuer = _configuration["JwtIssuer"] ?? "JwtAuthDemoIssuer";  
        var audience = _configuration["JwtAudience"] ?? "JwtAuthDemoAudience";  

        var claims = new[]  
        {  
            new Claim(JwtRegisteredClaimNames.Sub, user.Username),  
            new Claim(ClaimTypes.Role, user.Role),  
            new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())  
        };  

        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtKey));  
        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);  

        var token = new JwtSecurityToken(  
            issuer,  
            audience,  
            claims,  
            expires: DateTime.UtcNow.AddMinutes(30),  
            signingCredentials: creds  
        );  

        return new JwtSecurityTokenHandler().WriteToken(token);  
    }  
}  

Step 6: Create a Secured Endpoint
Add a test controller to check authentication:

using Microsoft.AspNetCore.Authorization;  
using Microsoft.AspNetCore.Mvc;  

[ApiController]  
[Route("[controller]")]  
public class WeatherForecastController : ControllerBase  
{  
    private static readonly string[] Summaries = new[]  
    {  
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot"  
    };  

    [HttpGet]  
    [Authorize]  
    public IActionResult Get()  
    {  
        var rng = new Random();  
        var result = Enumerable.Range(1, 5).Select(index => new  
        {  
            Date = DateTime.Now.AddDays(index),  
            TemperatureC = rng.Next(-20, 55),  
            Summary = Summaries[rng.Next(Summaries.Length)]  
        });  

        return Ok(result);  
    }  
}  

Step 7: Test Your API
Use Postman or curl:

Login
POST /auth/login  
Content-Type: application/json  

{  
  "username": "alice",  
  "password": "password123"  
}  
Response: { "token": "<jwt_token_here>" }

Call secured endpoint
GET /weatherforecast  
Authorization: Bearer <jwt_token_here>  
You get the weather data only if the token is valid.

Summary of Steps to Become Beginner to Expert on JWT Authentication

Level	          Focus Area
Beginner	      Learn the JWT structure, token generation, configuring middleware.
Intermediate	  Add claims, roles, refresh tokens, validate tokens fully.
Advanced	      Token revocation, rotate refresh tokens, use asymmetric keys, third-party integration, secure storage.

Best Practices Recap
Use HTTPS and secure secret keys.
Use short-lived tokens with refresh tokens.
Secure token storage on clients.
Validate tokens strictly on every request.
Log authentications and failures.
Use claims wisely.


Here is a complete, ready-to-run ASP.NET Core Web API project named AuthCheckerApp that demonstrates:

JWT Authentication with Access and Refresh Tokens
Role-based authorization
Best practices (short-lived access tokens, refresh token rotation, HTTPS recommendation)
Simple in-memory user store
Secure token validation with middleware

AuthCheckerApp: Full JWT Authentication Sample Project

Project Structure Overview

AuthCheckerApp/  
|-- Program.cs  
|-- Models/  
|     |-- User.cs  
|     |-- RefreshToken.cs  
|-- Services/  
|     |-- TokenService.cs  
|-- Stores/  
|     |-- UserStore.cs  
|     |-- RefreshTokenStore.cs  
|-- Controllers/  
|     |-- AuthController.cs  
|     |-- DataController.cs  

Add NuGet Package for JWT Authentication
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer  

1. Models
Models/User.cs
namespace AuthCheckerApp.Models  
{  
    public class User  
    {  
        public string Username { get; set; }  
        public string PasswordHash { get; set; } // For demo, plain text. Always hash in production  
        public string Role { get; set; }  
    }  
}  

Models/RefreshToken.cs
namespace AuthCheckerApp.Models  
{  
    public class RefreshToken  
    {  
        public string Token { get; set; }  
        public DateTime ExpiryDate { get; set; }  
        public string Username { get; set; }  
    }  
}  

2. In-memory Stores

Stores/UserStore.cs
using AuthCheckerApp.Models;  
using System.Collections.Generic;  

namespace AuthCheckerApp.Stores  
{  
    public static class UserStore  
    {  
        public static List<User> Users = new List<User>  
        {  
            new User { Username = "admin", PasswordHash = "password", Role = "Admin" },  
            new User { Username = "user", PasswordHash = "password", Role = "User" }  
        };  
    }  
}  

Stores/RefreshTokenStore.cs
using AuthCheckerApp.Models;  
using System.Collections.Generic;  

namespace AuthCheckerApp.Stores  
{  
    public static class RefreshTokenStore  
    {  
        public static List<RefreshToken> Tokens = new List<RefreshToken>();  
    }  
}  

3. JWT Settings (Put in Program.cs or separate static class)

public static class JwtSettings  
{  
    public const string SecretKey = "SuperSecretKeyForJwtTokenGeneration_ChangeThis!";  
    public const string Issuer = "AuthCheckerAppIssuer";  
    public const string Audience = "AuthCheckerAppAudience";  
    public const int AccessTokenExpirationMinutes = 15;  
    public const int RefreshTokenExpirationDays = 7;  
}  

4. Services/TokenService.cs

using AuthCheckerApp.Models;  
using Microsoft.IdentityModel.Tokens;  
using System.IdentityModel.Tokens.Jwt;  
using System.Security.Claims;  
using System.Security.Cryptography;  
using System.Text;  

namespace AuthCheckerApp.Services  
{  
    public class TokenService  
    {  
        public string GenerateAccessToken(User user)  
        {  
            var claims = new[]  
            {  
                new Claim(JwtRegisteredClaimNames.Sub, user.Username),  
                new Claim(ClaimTypes.Role, user.Role),  
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())  
            };  

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(JwtSettings.SecretKey));  
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);  

            var token = new JwtSecurityToken(  
                JwtSettings.Issuer,  
                JwtSettings.Audience,  
                claims,  
                expires: DateTime.UtcNow.AddMinutes(JwtSettings.AccessTokenExpirationMinutes),  
                signingCredentials: creds);  

            return new JwtSecurityTokenHandler().WriteToken(token);  
        }  

        public RefreshToken GenerateRefreshToken(string username)  
        {  
            return new RefreshToken  
            {  
                Token = Convert.ToBase64String(RandomNumberGenerator.GetBytes(64)),  
                ExpiryDate = DateTime.UtcNow.AddDays(JwtSettings.RefreshTokenExpirationDays),  
                Username = username  
            };  
        }  
    }  
}  

5. Controllers/AuthController.cs 

using AuthCheckerApp.Models;
using AuthCheckerApp.Services;
using AuthCheckerApp.Stores;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace AuthCheckerApp.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private TokenService _tokenService;

        public AuthController(TokenService tokenService) {
        
            _tokenService = tokenService;
        }


        [HttpPost("login")]
        public IActionResult Login([FromBody]User loginUser)
        {

            var user = UserStore.users.Where(u => u.Username == loginUser.Username && u.PasswordHash == loginUser.PasswordHash);

            if (user == null)
            {
                return Unauthorized("Invalid Creds");
            }

            var accessToken = _tokenService.GenerateAccessToken(loginUser);

            var refreshToken = _tokenService.GetRefreshToken(loginUser.Username);

            //Store refresh token

            RefreshTokenStore.refreshTokens.Add(refreshToken);

            return Ok( new {
                AccessToken =accessToken,
                RefreshToken = refreshToken
            });

        }

        public IActionResult RefreshToken([FromBody]string refreshToken)
        {
            var storedToken = RefreshTokenStore.refreshTokens.SingleOrDefault(t=> t.Token == refreshToken);

            if (storedToken == null || storedToken.ExpiryDate<DateTime.UtcNow) {

                return Unauthorized("Invalid or expired token");
            }

            var user = UserStore.users.SingleOrDefault(u => u.Username == storedToken.Username);

            if (user == null)
            {
                return Unauthorized("Invalid refresh token user");
            }

            //Implement rotation or remove old token 
            RefreshTokenStore.refreshTokens.Remove(storedToken);

            var newAccessToken = _tokenService.GenerateAccessToken(user);
            var newRefrehToken = _tokenService.GetRefreshToken(user.Username);

            RefreshTokenStore.refreshTokens.Add(newRefrehToken);

            return Ok(new
            {
                AccessToken = newAccessToken,
                RefreshToken = newRefrehToken

            });
        }

        [Authorize]
        [HttpPost("logout")]
        public IActionResult Logout([FromBody]string refreshToken)
        {
            var storedToken = RefreshTokenStore.refreshTokens.SingleOrDefault(t=> t.Token == refreshToken);

            if(storedToken != null)
            {
                RefreshTokenStore.refreshTokens.Remove(storedToken);
            }

            return NoContent();
        }

    }
}


6. Controllers/DataController.cs (Role-based secured endpoints)

using Microsoft.AspNetCore.Authorization;  
using Microsoft.AspNetCore.Mvc;  

namespace AuthCheckerApp.Controllers  
{  
    [ApiController]  
    [Route("[controller]")]  
    public class DataController : ControllerBase  
    {  
        [Authorize(Roles = "Admin")]  
        [HttpGet("admin-data")]  
        public IActionResult GetAdminData()  
        {  
            return Ok("This is protected data for Admins only.");  
        }  

        [Authorize(Roles = "Admin,User")]  
        [HttpGet("user-data")]  
        public IActionResult GetUserData()  
        {  
            return Ok("This data is accessible by both Admin and User roles.");  
        }  

        [HttpGet("public")]  
        [AllowAnonymous]  
        public IActionResult GetPublicData()  
        {  
            return Ok("This endpoint is public and does not require authentication.");  
        }  
    }  
}  

7. Program.cs (Full configuration)
csharp
using AuthCheckerApp.Services;  
using Microsoft.AspNetCore.Authentication.JwtBearer;  
using Microsoft.IdentityModel.Tokens;  
using System.Text;  

var builder = WebApplication.CreateBuilder(args);  

builder.Services.AddSingleton<TokenService>();  

builder.Services.AddControllers();  

builder.Services.AddAuthentication(options =>  
{  
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;  
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;  
})  
.AddJwtBearer(options =>  
{  
    options.TokenValidationParameters = new TokenValidationParameters  
    {  
        ValidateIssuer = true,  
        ValidIssuer = JwtSettings.Issuer,  

        ValidateAudience = true,  
        ValidAudience = JwtSettings.Audience,  

        ValidateIssuerSigningKey = true,  
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(JwtSettings.SecretKey)),  

        ValidateLifetime = true,  
        ClockSkew = TimeSpan.Zero // no clock skew, adjust as needed for latency  
    };  
});  

builder.Services.AddAuthorization();  

var app = builder.Build();  
 
app.UseRouting();  

// IMPORTANT: UseAuthentication must come before UseAuthorization  
app.UseAuthentication();  

app.UseAuthorization();  

app.MapControllers();  

app.Run();  


How to Run and Test

Run the project:
dotnet run  

Authenticate:
POST /auth/login with body:
json
{  
  "username": "admin",  
  "passwordHash": "password"  
}  

You'll receive an AccessToken and a RefreshToken.

Access secured endpoints:
Use Authorization: Bearer <AccessToken> header:
GET /data/admin-data (Only for Admin)
GET /data/user-data (User & Admin)
