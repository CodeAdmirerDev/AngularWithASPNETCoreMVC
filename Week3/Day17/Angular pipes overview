Let's dive into Angular pipes, focusing on built-in pipes and how to create custom pipes. 
I'll provide a detailed, step-by-step guide from beginner to expert level, along with best practices.

Angular Pipes: From Beginner to Expert

What are Pipes?
Pipes transform output in Angular templates.
They take input data and return a transformed version without changing the original data.

Useful for formatting dates, currencies, numbers, text, and more.

1. Built-in Pipes in Angular


Here's a complete Angular 19 component example that demonstrates all commonly used built-in (predefined) pipes along with their properties/arguments, 
so you get a full hands-on view.

‚úÖ Component Name: builtin-pipes-demo
üìÅ Step 1: Create the Component
ng generate component components/builtin-pipes-demo

üß† Step 2: Add Logic in builtin-pipes-demo.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-builtin-pipes-demo',
  templateUrl: './builtin-pipes-demo.component.html',
})
export class BuiltinPipesDemoComponent {
  name: string = 'CodeAdmirer';
  message: string = 'angular pipes demo';
  today: Date = new Date();
  price: number = 123456.789;
  percentage: number = 0.876;
  score: number = 95.6789;
  users = [{ id: 1, name: 'CodeAdmirer' }, { id: 2, name: 'CodeAdmirerDev' }];
  longText: string = 'This is a long sentence for slice pipe demo.';
}

üßæ Step 3: Add All Predefined Pipes in builtin-pipes-demo.component.html

<h2>Angular Built-in Pipes Demo</h2>

<!-- 1. Uppercase / Lowercase / Titlecase -->
<p><strong>Original:</strong> {{ name }}</p>
<p><strong>Uppercase:</strong> {{ name | uppercase }}</p>
<p><strong>Lowercase:</strong> {{ name | lowercase }}</p>
<p><strong>Titlecase:</strong> {{ message | titlecase }}</p>

<!-- 2. Date Pipe -->
<p><strong>Default Date:</strong> {{ today | date }}</p>
<p><strong>Full Date:</strong> {{ today | date:'fullDate' }}</p>
<p><strong>Short Time:</strong> {{ today | date:'shortTime' }}</p>
<p><strong>Custom Format:</strong> {{ today | date:'dd/MM/yyyy HH:mm:ss' }}</p>

<!-- 3. Currency Pipe -->
<p><strong>Default (USD):</strong> {{ price | currency }}</p>
<p><strong>INR with symbol:</strong> {{ price | currency:'INR':'symbol' }}</p>
<p><strong>EUR with code:</strong> {{ price | currency:'EUR':'code' }}</p>
<p><strong>JPY no decimals:</strong> {{ price | currency:'JPY':'symbol':'1.0-0' }}</p>

<!-- 4. Percent Pipe -->
<p><strong>Percentage (default):</strong> {{ percentage | percent }}</p>
<p><strong>Percentage (1 digit):</strong> {{ percentage | percent:'1.0-1' }}</p>

<!-- 5. Number Pipe -->
<p><strong>Number (default):</strong> {{ score | number }}</p>
<p><strong>1 integer, 2-3 decimals:</strong> {{ score | number:'1.2-3' }}</p>
<p><strong>2 integers, 0 decimals:</strong> {{ score | number:'2.0-0' }}</p>

<!-- 6. JSON Pipe -->
<p><strong>Object to JSON:</strong></p>
<pre>{{ users | json }}</pre>

<!-- 7. Slice Pipe -->
<p><strong>Original:</strong> {{ longText }}</p>
<p><strong>Slice (0‚Äì10):</strong> {{ longText | slice:0:10 }}</p>
<p><strong>Slice (10‚Äìend):</strong> {{ longText | slice:10 }}</p>

üîç Full Breakdown of Pipe Arguments

Pipe	            Format Syntax	Description
date	            'short', 'medium', 'fullDate', 'shortTime', or custom format like 'dd/MM/yyyy'	
currency        	currencyCode, display, digitsInfo	
percent          	digitsInfo like '1.0-2' ‚Üí min 1 integer, 0 min decimals, max 2 decimals	
number	          Same as percent ‚Äì '1.2-3'	
slice	            startIndex, endIndex	

üîÑ Step 4: Use in App Component
Update app.component.html to use the new component:
<app-builtin-pipes-demo></app-builtin-pipes-demo>

üìå Summary
‚úÖ All built-in pipes demonstrated
‚úÖ Each pipe includes all its formatting options

Also Angular comes with several built-in pipes:

Pipe Name	                        Purpose	                                  Example Usage
DatePipe	                        Formats dates	                            `{{ today
CurrencyPipe	                    Formats numbers as currency	              `{{ price
DecimalPipe	                      Formats decimal numbers with precision	  `{{ 3.14159
PercentPipe	                      Converts number to a percentage string	  `{{ 0.25
JsonPipe	                        Converts object to JSON string	          `{{ object
SlicePipe	                        Extracts a part of an array or string    	`{{ list
LowerCasePipe	                    Converts text to lowercase	              `{{ name
UpperCasePipe	                    Converts text to uppercase	              `{{ name


Example:
<p>Today's date: {{ today | date:'fullDate' }}</p>  
<p>Price: {{ price | currency:'USD':'symbol' }}</p>  

2. Creating Custom Pipes

When built-in pipes aren't enough, you can create your own.

Step-by-step:

Step 1: Generate a Pipe
Using Angular CLI:
ng generate pipe your-pipe-name  

E.g.:
ng generate pipe reverse  

This generates two files:
reverse.pipe.ts
reverse.pipe.spec.ts (for unit tests)

Step 2: Implement Pipe Logic
Open reverse.pipe.ts and implement the transform method.

Example: Reverse a string.

import { Pipe, PipeTransform } from '@angular/core';  
@Pipe({  
  name: 'reverse'  
})  
export class ReversePipe implements PipeTransform {  

  transform(value: string): string {  
    if (!value) return '';  
    return value.split('').reverse().join('');  
  }  

}  

Step 3: Register Pipe (if not using standalone)

If your Angular version is pre-standalone:

Add the pipe to declarations array in your module (typically app.module.ts):

import { ReversePipe } from './reverse.pipe';  

@NgModule({  
  declarations: [  
    ReversePipe,  
    // other components, pipes  
  ],  
})  
export class AppModule { }  

For standalone pipes (Angular 14+), you can declare standalone: true in the @Pipe decorator and import them directly in components.

Step 4: Use Your Pipe
Use it in your template:

<p>{{ 'Angular' | reverse }}</p> <!-- outputs: ralu gnA -->  

3. Advanced Custom Pipe Techniques
Pipes with Parameters
You can accept additional arguments in transform:

transform(value: string, limit: number): string {  
  return value.substr(0, limit);  
}  

Usage:

{{ message | truncate:10 }}  


Pure vs Impure Pipes
Pure pipe (default): runs only when input references change.
Impure pipe: runs every change detection cycle.

Set impure pipe by:

@Pipe({  
  name: 'example',  
  pure: false  
})  

Use impure pipes sparingly‚Äîthey can hurt performance.

4. Testing Pipes
Angular CLI generates .spec.ts files. Test your pipe:

describe('ReversePipe', () => {  
  const pipe = new ReversePipe();  

  it('reverses string correctly', () => {  
    expect(pipe.transform('abc')).toBe('cba');  
  });  

  it('returns empty string when value is null', () => {  
    expect(pipe.transform(null)).toBe('');  
  });  
});  

5. Best Practices for Pipes

Best Practice	                                  Explanation
Keep pipes stateless and pure                  	Avoid side effects and impure pipes
Use pure: false pipes only when necessary	      To avoid performance issues
Avoid heavy computations in pipes	              Pipes run often, keep logic light/sync
Use pipes for display and formatting only	      Keep business logic inside components/services
Give meaningful pipe names	                    Choose descriptive names for readability
Parameterize pipes for flexibility            	Accept arguments to make your pipes reusable
Always unit test your pipes	                    Ensure they work correctly in all cases


6. Summary / Roadmap to Expertise

Level	Goal	          How to Practice
Beginner	            Understand built-in pipes and create a simple custom pipe	Use Angular docs, create pipes like ‚Äúreverse‚Äù, ‚Äútruncate‚Äù
Intermediate	        Learn pure vs impure pipes, implement pipes with parameters	Build real-world scenarios; e.g., formatting data before display
Advanced	            Optimize pipes for performance, write tests, create standalone pipes	Practice writing tests, learn pipe lifecycle, create reusable pipelines
Expert	              Contribute to Angular open source, write complex pipes combining async handling or localization	Build libraries of pipes, explore AsyncPipe, use i18n, handle edge cases

