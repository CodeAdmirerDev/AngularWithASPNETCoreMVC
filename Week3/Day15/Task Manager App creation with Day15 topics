Real-time Project Example: Task Manager


Project Goals
    Angular 19 (non-standalone components)
    Server-Side Rendering (SSR) with Angular Universal
    Routing enabled
    Parent-child communication using @Input, @Output, and EventEmitter
    Use @ViewChild to directly invoke child component methods
    Best practices and reusable clean components

Prerequisites
    Node.js (v18+ recommended)
    Angular CLI v15+ (npm install -g @angular/cli)
    Basic Angular knowledge

Scenario:
    ParentComponent represents Task Manager Dashboard.
    ChildComponent represents a Task Item.
    User adds tasks via Parent.
    Child emits events when task status changes.
    Another component (SiblingComponent) shows task statistics.
    Use @ViewChild to reset task input from Parent.

Step-by-step process for Real-time Example

Step 1: Setup Angular App & SSR Environment

Run:
ng new angular-comm-project --routing --style=scss  
cd angular-comm-project  
ng add @nguniversal/express-engine  

This sets up Angular 19 app with routing and SSR using Express.
Your project structure will have src/main.ts for browser, and server.ts for server.
angular.json updated with server build targets.


Step 2: Create Required Components

We'll have components for:
Task Dashboard (ParentComponent)
Task Item (ChildComponent)
Statistics Panel (SiblingComponent)
ViewChild Example (for reset input textbox)

Generate:
ng generate component components/task-dashboard  
ng generate component components/task-item  
ng generate component components/statistics-panel  
ng generate component components/view-child-example  

Step 3: Define Task Model

Create task.model.ts inside src/app/models/:
export interface Task {  
  id: number;  
  title: string;  
  completed: boolean;  
}  

Step 4: Task Dashboard (Parent Component)
task-dashboard.component.ts
import { Component } from '@angular/core';  
import { Task } from '../../models/task.model';  

@Component({  
  selector: 'app-task-dashboard',  
  templateUrl: './task-dashboard.component.html',  
  styleUrls: ['./task-dashboard.component.scss'],  
})  
export class TaskDashboardComponent {  
  taskTitle = '';  
  tasks: Task[] = [];  

  addTask() {  
    if (!this.taskTitle.trim()) return;  

    const newTask: Task = {  
      id: Date.now(),  
      title: this.taskTitle.trim(),  
      completed: false,  
    };  

    this.tasks.push(newTask);  
    this.taskTitle = ''; // reset the input  
  }  

  updateTaskStatus(taskId: number, completed: boolean) {  
    const task = this.tasks.find((t) => t.id === taskId);  
    if (task) {  
      task.completed = completed;  
    }  
  }  
}  

task-dashboard.component.html

<div class="task-dashboard">  
  <h2>Task Manager Dashboard</h2>  

  <input  
    type="text"  
    placeholder="Add new task"  
    [(ngModel)]="taskTitle"  
    (keyup.enter)="addTask()"  
    aria-label="Task Title"  
  />  
  <button (click)="addTask()">Add Task</button>  

  <ul>  
    <li *ngFor="let task of tasks">  
      <app-task-item  
        [task]="task"  
        (statusChanged)="updateTaskStatus($event.taskId, $event.completed)"  
      ></app-task-item>  
    </li>  
  </ul>  

  <app-statistics-panel [tasks]="tasks"></app-statistics-panel>  
</div>  

Step 5: Task Item (Child Component)

task-item.component.ts
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';  
import { Task } from '../../models/task.model';  

@Component({  
  selector: 'app-task-item',  
  templateUrl: './task-item.component.html',  
  styleUrls: ['./task-item.component.scss'],  
  changeDetection: ChangeDetectionStrategy.OnPush,  
})  
export class TaskItemComponent {  
  @Input() task!: Task;  
  @Output() statusChanged = new EventEmitter<{ taskId: number; completed: boolean }>();  

  toggleStatus() {  
    this.statusChanged.emit({  
      taskId: this.task.id,  
      completed: !this.task.completed,  
    });  
  }  
}  

task-item.component.html
<div [class.completed]="task.completed" class="task-item">  
  <input  
    type="checkbox"  
    [checked]="task.completed"  
    (change)="toggleStatus()"  
    aria-label="Toggle task completion"  
  />  
  <span>{{ task.title }}</span>  
</div>  

task-item.component.scss
.task-item {  
  display: flex;  
  align-items: center;  
  padding: 4px 0;  

  &.completed span {  
    text-decoration: line-through;  
    color: gray;  
  }  
}  

Step 6: Statistics Panel (Sibling Component)
statistics-panel.component.ts
import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';  
import { Task } from '../../models/task.model';  

@Component({  
  selector: 'app-statistics-panel',  
  templateUrl: './statistics-panel.component.html',  
  styleUrls: ['./statistics-panel.component.scss'],  
})  
export class StatisticsPanelComponent implements OnChanges {  
  @Input() tasks: Task[] = [];  
  total = 0;  
  completed = 0;  

  ngOnChanges(changes: SimpleChanges): void {  
    if (changes['tasks']) {  
      this.total = this.tasks.length;  
      this.completed = this.tasks.filter((t) => t.completed).length;  
    }  
  }  
}  

statistics-panel.component.html
<div class="statistics-panel">  
  <h3>Task Statistics</h3>  
  <p>Total Tasks: {{ total }}</p>  
  <p>Completed Tasks: {{ completed }}</p>  
</div>  

Step 7: Use @ViewChild to Control Task Input (Advanced)

Update task-dashboard.component.html:
<!-- Add template reference variable -->  
<input  
  #taskInput  
  type="text"  
  placeholder="Add new task"  
  [(ngModel)]="taskTitle"  
  (keyup.enter)="addTaskAndReset(taskInput)"  
  aria-label="Task Title"  
/>  
<button (click)="addTaskAndReset(taskInput)">Add Task</button>  

Update task-dashboard.component.ts:

import { Component, ViewChild, ElementRef } from '@angular/core';  
import { Task } from '../../models/task.model';  

@Component({  
  selector: 'app-task-dashboard',  
  templateUrl: './task-dashboard.component.html',  
  styleUrls: ['./task-dashboard.component.scss'],  
})  
export class TaskDashboardComponent {  
  taskTitle = '';  
  tasks: Task[] = [];  

  addTaskAndReset(inputElement: HTMLInputElement) {  
    if (!this.taskTitle.trim()) return;  

    const newTask: Task = {  
      id: Date.now(),  
      title: this.taskTitle.trim(),  
      completed: false,  
    };  

    this.tasks.push(newTask);  
    this.taskTitle = '';  

    // Reset input field using native ElementRef access  
    inputElement.focus();  
  }  
}  

Step 8: Add Routing Path and Default Navigation

Update app-routing.module.ts:

import { NgModule } from '@angular/core';  
import { RouterModule, Routes } from '@angular/router';  
import { TaskDashboardComponent } from './components/task-dashboard/task-dashboard.component';  

const routes: Routes = [  
  { path: '', component: TaskDashboardComponent },  
  { path: '**', redirectTo: '', pathMatch: 'full' },  
];  

@NgModule({  
  imports: [RouterModule.forRoot(routes, { initialNavigation: 'enabledBlocking' })],  
  exports: [RouterModule],  
})  
export class AppRoutingModule {}  

Step 9: Import FormsModule for ngModel

In app.module.ts, add:

import { FormsModule } from '@angular/forms';  

@NgModule({  
  imports: [  
    BrowserModule.withServerTransition({ appId: 'serverApp' }),  
    AppRoutingModule,  
    FormsModule, // required for ngModel        
  ],  
  //... declarations, bootstrap etc.  
})  
export class AppModule {}  

Step 10: Run and Test the Real-Time Task Manager App
npm run dev:ssr  

Visit http://localhost:4200,
  Add tasks.
  Mark them complete/uncomplete.
  See statistics update live.
  Test keyboard enter button.
  Confirm SSR (page loads server-rendered first).

Best Practices Demonstrated in This Example
  Typed inputs & outputs: Strong typing on Task model.
  Emitting rich events with objects: Using { taskId, completed } instead of bare primitives.
  Component isolation with OnPush: Avoid unwanted change detection.
  Immutable updates: Avoid mutating input directly; update parent state.
  Accessibility: Input labels and semantics.
  User experience: Input reset + focus with @ViewChild using template ref variable.
  SSR compatibility: Proper navigation config and no DOM manipulations in constructors.
  Organizational folder structure: models, components separated.
  Clear naming with task-dashboard, task-item, statistics-panel.
