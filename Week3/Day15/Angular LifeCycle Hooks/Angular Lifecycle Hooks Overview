Let's dive deep into Angular lifecycle hooks (Angular 19) focusing on non-standalone components. 
I'll explain the core concepts, when and why hooks fire, real-world usage, practical tasks, interview tips, and best practices. 
This will take you from beginner to expert level.

ðŸ”¹ What is a Lifecycle Hook?
Lifecycle hooks are specific methods Angular calls at key moments in a componentâ€™s lifespan:
Initialization
Changes detection
Content projection
View rendering
Destruction

They allow you to tap into these moments to perform tasks like initialization, update processing, cleanup, or interacting with the DOM.

ðŸ”¹ Key Lifecycle Hooks and When/Why They Fire

Hook	                      When it triggers	                                            Why/Use Case
ngOnChanges	                Before ngOnInit and any time @Input() properties change	      React to changes in input properties
ngOnInit	                  Once, after first ngOnChanges and after inputs are set	      Initialize component, fetch data, set up initial state
ngDoCheck	                  Every change detection cycle	                                Custom change detection or complex checks beyond ngOnChanges
ngAfterContentInit	        After projected content (ng-content) is initialized	          Access and interact with projected content
ngAfterContentChecked	      After every change detection of projected content	            Respond to changes in content projection
ngAfterViewInit	            After component's and child views are initialized	            Access ViewChild or DOM elements safely
ngAfterViewChecked	        After every change detection on view and child views	        Respond to changes in the component's view
ngOnDestroy	                Right before the component is destroyed	                      Clean up, unsubscribe from Observables, detach event handlers


ðŸ”¹ Real-Time Use Cases
1. Fetching Data
Use ngOnInit to load data from APIs so the component starts with required data once initialized.

ngOnInit() {  
  this.dataService.getData().subscribe(data => {  
    this.items = data;  
  });  
}  

2. Cleaning up Subscriptions or Timers
Use ngOnDestroy to avoid memory leaks by unsubscribing from Observables or clearing timers.

private subscription: Subscription;  

ngOnInit() {  
  this.subscription = this.someService.someStream.subscribe(x => {  
    // handle data  
  });  
}  

ngOnDestroy() {  
  this.subscription.unsubscribe();  
}  


3. DOM Access with ViewChild
Access DOM or child components only after view initialization in ngAfterViewInit.

@ViewChild('inputRef') inputElement: ElementRef;  

ngAfterViewInit() {  
  this.inputElement.nativeElement.focus();  
}  


ðŸ”¹ Mini Practice Task: Using Lifecycle Hooks with Dynamic Child Components

Step 1: Setup parent and child components.

child.component.ts

import { Component, OnDestroy, OnInit } from '@angular/core';  

@Component({  
  selector: 'app-child',  
  template: `<p>Child component loaded</p>`  
})  
export class ChildComponent implements OnInit, OnDestroy {  

  ngOnInit() {  
    console.log('Child: ngOnInit');  
  }  

  ngOnDestroy() {  
    console.log('Child: ngOnDestroy');  
  }  
}  

parent.component.ts

import { Component, ComponentRef, ViewChild, ViewContainerRef } from '@angular/core';  
import { ChildComponent } from './child.component';  

@Component({  
  selector: 'app-parent',  
  template: `  
    <button (click)="loadChild()">Load Child</button>  
    <button (click)="removeChild()" [disabled]="!childComponent">Remove Child</button>  
    <ng-template #container></ng-template>  
  `  
})  
export class ParentComponent {  
  @ViewChild('container', { read: ViewContainerRef }) container!: ViewContainerRef;  
  childComponent!: ComponentRef<ChildComponent> | null;  

  loadChild() {  
    if (!this.childComponent) {  
      this.childComponent = this.container.createComponent(ChildComponent);  
      console.log('Child component created');  
    }  
  }  

  removeChild() {  
    if (this.childComponent) {  
      this.childComponent.destroy();  
      this.childComponent = null;  
      console.log('Child component destroyed');  
    }  
  }  
}  

Step 2: Run and watch console logs for lifecycle events firing.

ðŸ”¹ Interview Tips & Common Questions
Tips:
Understand why and when each lifecycle hook runs.
Be able to explain the differences between ngOnInit and constructor.
Know when to use ngDoCheck vs ngOnChanges.
Be prepared to explain memory leak risks if ngOnDestroy is neglected.
Use examples, preferably from your coding experience.
Demonstrate knowledge of Angular change detection and lifecycle interplay.

Common Questions:
What is the purpose of ngOnInit?
To initialize the component after Angular sets the input properties.

When is ngOnChanges called?
Anytime the bound input properties change.

Difference between ngOnInit and ngAfterViewInit?
ngOnInit initializes component data, ngAfterViewInit is for DOM querying (like ViewChild).

What do you do in ngOnDestroy?
Cleanup subscriptions and detach event listeners to prevent memory leaks.

When would you use ngDoCheck?
For custom and complex change detection scenarios.

ðŸ”¹ Step-by-Step to Become Beginner â†’ Expert

Stage	          Learning Focus	                                            Resources/Actions
Beginner	      Understand component basics and data binding	              Official Angular Tutorial + Lifecycle docs
Intermediate	  Learn each hook, practical examples	                        Create small apps using hooks to fetch data/polish UI
Advanced	      Custom change detection with ngDoCheck, dynamic components	Build dynamic components, optimize with OnPush change detection
Expert	        Performance tuning, deep knowledge of change detection	    Solve real-world problems, debug complex lifecycle issues, contribute to Angular repos or blogs


Simple Angular 19 Project Using All Lifecycle Hooks (Non-Standalone)

Project Setup Overview:

One parent component hosting a child component
Child component implements all lifecycle hooks
Logs to console when each hook runs

Simple template for clarity
Project Files

app.module.ts
import { NgModule } from '@angular/core';  
import { BrowserModule } from '@angular/platform-browser';  

import { AppComponent } from './app.component';  
import { ChildComponent } from './child.component';  

@NgModule({  
  declarations: [  
    AppComponent,  
    ChildComponent  
  ],  
  imports: [  
    BrowserModule  
  ],  
  bootstrap: [AppComponent]  
})  
export class AppModule { }  

app.component.ts (Parent)

import { Component, ViewChild, ViewContainerRef, ComponentRef } from '@angular/core';  
import { ChildComponent } from './child.component';  

@Component({  
  selector: 'app-root',  
  template: `  
    <h1>Angular LifeCycle hooks Demo </h1>
  <button (click)="createChild()" [disabled]="childRef"> Create Child</button>
  <button (click)="destroyChild()" [disabled]="!childRef"> Destroy Child</button>
  <ng-template #container></ng-template>
  <input type="text" [(ngModel)]="title"/>
  <app-child-component [inputData]="title" ></app-child-component>
  `  
})  
export class AppComponent {  
  @ViewChild('container', { read: ViewContainerRef }) container!: ViewContainerRef;  
  childRef!: ComponentRef<ChildComponent> | null;  

  createChild() {  
    if (!this.childRef) {  
      this.childRef = this.container.createComponent(ChildComponent);  
    }  
  }  

  destroyChild() {  
    if (this.childRef) {  
      this.childRef.destroy();  
      this.childRef = null;  
    }  
  }  
}  

child.component.ts (Child - all lifecycle hooks)
import {  
  Component, Input, OnChanges, OnInit, DoCheck,  
  AfterContentInit, AfterContentChecked,  
  AfterViewInit, AfterViewChecked,  
  OnDestroy, SimpleChanges  
} from '@angular/core';  

@Component({  
  selector: 'app-child',  
  template: `  
    <div>  
      <p>Child component loaded. Check console for lifecycle logs.</p>  
    </div>  
  `  
})  
export class ChildComponent implements  
  OnChanges, OnInit, DoCheck,  
  AfterContentInit, AfterContentChecked,  
  AfterViewInit, AfterViewChecked,  
  OnDestroy {  

  @Input() inputData: string = '';  

  constructor() {  
    console.log('Child: constructor');  
  }  

  ngOnChanges(changes: SimpleChanges) {  
    console.log('Child: ngOnChanges', changes);  
  }  

  ngOnInit() {  
    console.log('Child: ngOnInit');  
  }  

  ngDoCheck() {  
    console.log('Child: ngDoCheck');  
  }  

  ngAfterContentInit() {  
    console.log('Child: ngAfterContentInit');  
  }  

  ngAfterContentChecked() {  
    console.log('Child: ngAfterContentChecked');  
  }  

  ngAfterViewInit() {  
    console.log('Child: ngAfterViewInit');  
  }  

  ngAfterViewChecked() {  
    console.log('Child: ngAfterViewChecked');  
  }  

  ngOnDestroy() {  
    console.log('Child: ngOnDestroy');  
  }  
}  

How to Run?
Create an Angular 19 project (ng new lifecycle-demo --no-standalone)
Replace files with above code.
Run ng serve and open console to watch logs.
Click Create Child and Destroy Child buttons to see lifecycle hook flow.

Lifecycle Hooks: Advantage, Disadvantage & Best Practices
Hook	                      Advantage	                                        Disadvantage	                                          Best Practices
constructor	                Initialize variables early	                      Not for Angular bindings or inputs	                    Use for DI, minimal logic
ngOnChanges	                Respond to input property changes	                Fires often, can cause performance issues	              Use for simple input updates only
ngOnInit	                  Initialize component logic after inputs are set	  Cannot respond to later input changes	                  Use for fetch/init; keep lightweight
ngDoCheck	                  Custom change detection	                          Very frequent; heavy logic hurts performance	          Use sparingly with optimized logic
ngAfterContentInit	        Hook after projected content initialization	      Only useful if using <ng-content>	                      Access or manipulate projected content safely
ngAfterContentChecked	      After every projected content check	              Called after every CD cycle; costly if heavy	          Avoid heavy logic here
ngAfterViewInit	            Access ViewChild and DOM elements	                DOM might not be stable in dynamic scenarios	          Access DOM elements here only
ngAfterViewChecked        	After every component view check	                May fire frequently causing performance bottlenecks	    Avoid heavy processing here
ngOnDestroy	                Cleanup subscriptions/resources before destroy  	Forgetting this causes memory leaks	                    Always unsubscribe/clear timers here

Summary of Best Practices:

Use the constructor for dependency injection only; avoid complex logic.
Initialize data and fetch resources in ngOnInit.
Use ngOnChanges only for reacting to @Input changes.
Avoid expensive or heavy logic in ngDoCheck and After...Checked hooks.
Access DOM/query children only after ngAfterViewInit.
Always clean up in ngOnDestroy (subscriptions, timers).
Avoid side-effects or asynchronous calls that can cause change detection loops inside hooks.
Use trackBy in ngFor when dealing with lists to optimize re-rendering.
Maintain clean and testable lifecycle logic; keep hooks lean.
