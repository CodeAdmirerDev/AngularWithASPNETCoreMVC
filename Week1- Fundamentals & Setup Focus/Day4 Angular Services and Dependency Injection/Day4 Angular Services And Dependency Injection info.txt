✅ Day 4 - Angular Services & Dependency Injection: Beginner to Expert (with Explanations)

🟢 Beginner Level

🧩 Concepts to Understand:
What is a service?
What is Dependency Injection?
Singleton pattern in Angular
Why use services?

🔸 What is a Service in Angular?
A Service in Angular is a class that holds logic or data that can be shared across components.
Instead of writing the same logic in multiple places, we write it once in a service and inject it wherever needed.

🔍 Think of it as:
"A separate helper file where you write logic once and use it anywhere in your app."

🧠 Example Use Cases:
Calling REST APIs
Storing user authentication state
Centralizing business rules
Utility/helper methods

🔧 Sample Service:
@Injectable({
  providedIn: 'root'
})
export class GreetingService {
  getGreeting(): string {
    return 'Hello from Angular Service!';
  }
}




🔸 What is Dependency Injection (DI)?
Dependency Injection is a design pattern Angular uses to provide components with the services they need.

🔍 Think of it as:
"Instead of creating the object yourself, Angular gives it to you when needed."

📦 Example:
constructor(private userService: UserService) {}

Here, Angular will:
Create an instance of GreetingService
Provide it to the component
Manage its lifecycle

🟨 No need to write: let greetingService = new GreetingService(); — Angular handles it.

👉 This tells Angular:
“Hey Angular, give me an instance of UserService for this component.”


✅ 3. What is the Singleton Pattern in Angular?
A singleton means only one instance of a service is created and shared across the entire application.

When you use:
@Injectable({ providedIn: 'root' })

Angular will:
Create the service once
Reuse the same instance for all components/services that need it

🧠 Why this is good?
Saves memory
Maintains a shared state
Cleaner code


✅ 4. Why Use Services in Angular?

Using services in Angular makes your app:
✅ 1. Modular – Logic is not scattered across components
✅ 2. Reusable – Same service can be used in multiple places
✅ 3. Testable – Easier to write unit tests for logic inside services
✅ 4. Separation of Concerns – Components handle UI; services handle logic/data
✅ 5. Maintainable – Easier to update/change logic in one place

🔍 Example Scenario:
Instead of writing the same HTTP code in 3 components, write it once in a service and use it everywhere.

🔁 Quick Summary Table:
Concept	              Description
Service	              A reusable class for logic/data across components
Dependency Injection	Angular provides required instances automatically
Singleton Pattern	    Only one instance of a service exists app-wide (providedIn: 'root')
Why use services?	    For clean, reusable, testable, and modular code


🟡 Intermediate Level

Concepts to Understand:
Injectable services with @Injectable()
Service Injection Scope: providedIn: 'root' vs module-based providers
API calls using HttpClient
Observables and Subscriptions
RxJS basics (map, catchError)


🟡 Intermediate Level – Angular Services & Dependency Injection
✅ 1. @Injectable() and How Services Become Injectable

🔸 @Injectable() and providedIn: 'root'
@Injectable() is a decorator that marks a class as available to be injected.

providedIn: 'root' makes the service a singleton and available throughout the app without registering it in a module.
✅ Syntax:
import { Injectable } from '@angular/core';
@Injectable({
  providedIn: 'root' // Optional, tells Angular to create one global instance
})
export class UserService {
  constructor() { }
}

📌 This ensures Angular automatically creates one instance of the service and shares it globally.

or

🔸 What is @Injectable()?
It’s a decorator that tells Angular:
“This class might have dependencies. Please manage it and allow it to be injected elsewhere.”


💡 Why it matters:
If you inject other services into this service, Angular needs to know how to resolve them. @Injectable() handles that.

✅ 2. Service Injection Scope
🔹 providedIn: 'root'
Angular creates one instance for the entire app (singleton).
Most commonly used.

🔹 providedIn: 'any'
A new instance for each lazy-loaded module.
Useful for modular apps.

🔹 Registering in a Module
Alternatively, register in providers array of a specific module:
@NgModule({
  providers: [UserService]
})
export class AdminModule { }

Service will be available only to that module and its components.

✅ 3. API Calls using HttpClient

🔸 What is HttpClientModule?
Angular uses HttpClientModule to make HTTP calls (GET, POST, etc.) to remote servers (APIs).
It’s based on Observables and provides powerful features like:
  Streamed data
  Error handling
  Request/response transformations

Angular's HttpClient service (from @angular/common/http) lets you make API requests easily.

🔧 Setup: Import in app.module.ts
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  imports: [HttpClientModule]
})
export class AppModule {}

📄 Sample Service:
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { User } from '../models/user.model';

@Injectable({
  providedIn: 'root'
})
export class UserService {
  private apiUrl = 'https://jsonplaceholder.typicode.com/users';

  constructor(private http: HttpClient) {}

  getUsers(): Observable<User[]> {
    return this.http.get<User[]>(this.apiUrl);
  }
}

✅ 4. Observables & Subscriptions
Angular uses Observables (from RxJS) for all async operations — especially HTTP requests.

🔸 Observables in Services
Angular uses RxJS Observables to handle asynchronous operations like HTTP calls.

💡 What is an Observable?
An object that emits values over time (like a stream).

Why Observables?
They are powerful and composable.
You can use operators like map, filter, catchError, etc.
You can unsubscribe to avoid memory leaks.


💡 What is a Subscription?
Listening to that stream and reacting to emitted values.

👇 Usage Example:
this.userService.getUsers().subscribe(users => {
  this.users = users;
});
❗️Important: Unsubscribe when the component is destroyed to avoid memory leaks (or use async pipe).

✅ 5. RxJS Basics (map, catchError, etc.)

🔹 map – Transforms the data coming from the API
getUsers(): Observable<string[]> {
  return this.http.get<User[]>(this.apiUrl).pipe(
    map(users => users.map(u => u.name)) // return only names
  );
}

🔹 catchError – Handles errors gracefully
import { catchError } from 'rxjs/operators';
import { of } from 'rxjs';

getUsers(): Observable<User[]> {
  return this.http.get<User[]>(this.apiUrl).pipe(
    catchError(error => {
      console.error('Error occurred:', error);
      return of([]); // return empty array if error
    })
  );
}

🔁 Quick Summary Table

Concept	Description
@Injectable()	      Marks a service as injectable and allows DI
providedIn: 'root'	Makes service a singleton, shared app-wide
HttpClient	        Used for API communication
Observable	        Represents a stream of async data
Subscription	      Listens to the Observable and executes logic on data emit
RxJS map	          Transforms data (e.g., filtering, formatting)
RxJS catchError	    Catches and handles errors from an Observable

✅ Best Practices for Intermediate Level
✅ Keep API logic only in services (not in components)
✅ Always use models/interfaces for typed data
✅ Use async pipe in templates to avoid manual unsubscribe()
✅ Use catchError to provide fallback/default values
✅ Keep services stateless (unless you’re intentionally sharing state)


🔴 Expert Level

🧠 Concepts to Master:
Injectable Hierarchy (root vs component-level)
Lazy-loaded module service scopes
Interceptors
Abstract Services and Interfaces
Dependency Injection Tokens
Unit Testing Services with HttpTestingController
Use RxJS operators (switchMap, mergeMap, retry, debounceTime, etc.)


🧠 1. Injectable Hierarchy

✅ Levels of Injection:
providedIn: 'root' → App-wide singleton (most common).
providedIn: 'any' → One instance per lazy-loaded module.

Component providers: [] → New instance for each component.
@Injectable({
  providedIn: 'any'
})
export class ScopedService {}

🔄 Use providedIn: 'any' for module encapsulation, helpful when services should not share state across the app.

🧠 2. Lazy-loaded Module Service Scope
🔧 Example:
@NgModule({
  providers: [AdminService]
})
export class AdminModule {}
If AdminModule is lazy-loaded, AdminService will be scoped only to it, allowing you to:
Limit memory usage
Avoid unintended shared state

🧠 3. HTTP Interceptors
Interceptors let you intercept all HTTP requests/responses for:
Adding tokens
Logging
Showing spinners
Handling global errors


📄 Create Auth Interceptor:

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const token = 'dummy-token';
    const authReq = req.clone({
      setHeaders: { Authorization: `Bearer ${token}` }
    });
    return next.handle(authReq);
  }
}

🧩 Register Interceptor:

providers: [
  {
    provide: HTTP_INTERCEPTORS,
    useClass: AuthInterceptor,
    multi: true
  }
]
✅ multi: true allows multiple interceptors.

🧠 4. Abstract Services & Interfaces
You can create abstract base services or use interfaces to enforce structure.

✅ Abstract Example:
export abstract class BaseService<T> {
  abstract getAll(): Observable<T[]>;
}
Now your services like UserService, ProductService can extend it.

🧠 5. Dependency Injection Tokens
Use InjectionToken when injecting:

Primitive values (like strings, booleans)

Config objects

Multiple implementations of an interface

🔧 Example:
export const API_URL = new InjectionToken<string>('apiUrl');

@NgModule({
  providers: [
    { provide: API_URL, useValue: 'https://api.example.com' }
  ]
})
export class AppModule {}

constructor(@Inject(API_URL) private apiUrl: string) {}

🧠 6. Unit Testing Services with HttpTestingController
✅ Setup:
TestBed.configureTestingModule({
  imports: [HttpClientTestingModule],
  providers: [UserService]
});

✅ Test:
it('should fetch users', () => {
  const dummyUsers = [{ id: 1, name: 'John' }];
  
  service.getUsers().subscribe(users => {
    expect(users).toEqual(dummyUsers);
  });

  const req = httpMock.expectOne('https://jsonplaceholder.typicode.com/users');
  expect(req.request.method).toBe('GET');
  req.flush(dummyUsers);
});

🧠 7. RxJS Operators – Advanced Use Cases

Operator	      Description / Use Case
switchMap	      Cancel previous observable when new value comes (e.g., type-ahead search)
mergeMap	      Run all observables concurrently (e.g., nested calls)
concatMap	      Queue observable calls one after the other
retry	          Automatically retry failed HTTP requests
debounceTime	  Delay emissions (great for input search)
catchError	    Gracefully handle errors

🔧 Example with switchMap and debounceTime (search API):

this.searchControl.valueChanges.pipe(
  debounceTime(300),
  switchMap(query => this.apiService.search(query))
).subscribe(results => this.results = results);

✅ Final Summary

Concept	                What You Gain

Injectable hierarchy	  Fine-grained control of service scope
Lazy module DI	        Encapsulation, performance optimization
Interceptors	          Global control over HTTP traffic
Abstract services	      Reusability and consistent contracts
Injection tokens	      Inject configs or multiple implementations safely
HttpTestingController	  Clean & fast unit tests for services
Advanced RxJS	          Reactive, high-performance, real-time UI behavior

💡 Pro Tip
Create a core module for global singletons (e.g., logging, auth), and a shared module for common pipes/components.


🛡 Best Practices Summary

Practice	Why?
Use providedIn: 'root'	Automatically tree-shaken and singleton
Use interfaces for API data	Ensures type safety
Keep services stateless if possible	Avoid bugs due to shared state
Use async pipe in template instead of subscribe()	Avoid manual unsubscription
Handle errors using catchError	Improve UX and stability
Write unit tests for services	Ensure service logic is correct
Avoid putting business logic in components	Keep components clean and focused on UI

🚀 Final Suggestion
Want a mini project idea to practice this?

✅ Build a User Management App

Fetch list of users (GET)
Add a user (POST)
Delete a user (DELETE)

Use interceptors, services, and BehaviorSubject to manage state
