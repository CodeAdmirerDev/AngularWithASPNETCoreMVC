✅ Day 3: Angular Routing (for Beginners - Angular v19 with Module-based Setup)

🔹 What is Routing in Angular?
Routing in Angular is the mechanism that allows you to navigate between different views or pages in a Single Page Application (SPA) without reloading the whole page. It uses the browser’s history API under the hood.

🛠️ 1. Configure Routes
In Angular, routes are configured using the RouterModule in your main module (usually app.module.ts) or in a separate routing module (app-routing.module.ts).

🔸 Setup process Step-by-Step:
✅ a. Create Components
ng generate component home
ng generate component about
ng generate component product-details

✅ b. Create Routing Module (if not already present)

ng generate module app-routing --flat --module=app

This adds AppRoutingModule and automatically imports it into AppModule.

✅ c. Define Routes in app-routing.module.ts

// src/app/app-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { AboutComponent } from './about/about.component';
import { ProductDetailsComponent } from './product-details/product-details.component';

const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'about', component: AboutComponent },
  { path: 'product/:id', component: ProductDetailsComponent }, // route parameter
  { path: '**', redirectTo: '' } // wildcard route
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}

✅ d. Add <router-outlet> in app.component.html
<!-- src/app/app.component.html -->
<nav>
  <a routerLink="/">Home</a> |
  <a routerLink="/about">About</a> |
  <a [routerLink]="['/product', 101]">Product 101</a>
</nav>
<hr />
<router-outlet></router-outlet>

🧭 2. Navigation with routerLink
routerLink is a directive used in Angular templates for navigation.

🔸 Examples:
✅ Static Route
<a routerLink="/about">About Us</a>

✅ Dynamic Route with Parameters
<a [routerLink]="['/product', 101]">View Product 101</a>

It is bound to an array to dynamically build the route.

🔍 3. Route Parameters
Used when you want to pass dynamic data in the URL (like product ID, user ID, etc.).

✅ Defining a Route with Parameter
{ path: 'product/:id', component: ProductDetailsComponent }
Here :id is a route parameter.

✅ Reading Route Parameters in Component
Inside ProductDetailsComponent:
// src/app/product-details/product-details.component.ts
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-product-details',
  template: `
    <h2>Product Details</h2>
    <p>Product ID: {{ productId }}</p>
  `
})
export class ProductDetailsComponent implements OnInit {
  productId: string | null = null;

  constructor(private route: ActivatedRoute) {}

  ngOnInit(): void {
    this.productId = this.route.snapshot.paramMap.get('id');
  }
}

✅ Alternative: Using route.paramMap.subscribe() for Dynamic Changes
Useful when you're not reloading the component but just navigating to a new ID:
ngOnInit(): void {
  this.route.paramMap.subscribe(params => {
    this.productId = params.get('id');
  });
}

🧠 Bonus: Wildcard Route
Use ** to handle unknown routes (like a 404 page):
{ path: '**', redirectTo: '' }

🎯 Practice Task for Day 3
Create 3 components: Home, About, ProductDetails.

Add routes for /, /about, /product/:id.
Add navigation menu using routerLink.
Read and display the route parameter (product ID).
Add a wildcard route.

🧩 Final Structure

src/
 ┣ app/
 ┃ ┣ home/
 ┃ ┣ about/
 ┃ ┣ product-details/
 ┃ ┣ app-routing.module.ts ✅
 ┃ ┗ app.module.ts ✅
