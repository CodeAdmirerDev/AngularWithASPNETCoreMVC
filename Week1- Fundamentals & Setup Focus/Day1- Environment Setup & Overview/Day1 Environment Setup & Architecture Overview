✅ Day 1: Environment Setup & Architecture Overview (Beginner-Friendly)
🧠 By the end of Day 1, you’ll have your dev environment ready and understand the basics of Angular and ASP.NET Core MVC architecture.

🔹 Part 1: Install Required Software
1️⃣ Install Node.js & NPM
🔧 Node is required for Angular. NPM comes with it.

📥 Download & Install:
👉 https://nodejs.org/en/download/
Choose the LTS (Long-Term Support) version

✅ After installation:
node -v
npm -v
You should see version numbers like v22.x.x and 10.x.x.

📘 What is Node.js?
Node.js lets Angular manage packages (libraries) and build/serve the app using command-line tools.

2️⃣ Install Angular CLI
The Angular CLI is the command-line tool to create and manage Angular projects.

📦 Run this in terminal (Command Prompt or PowerShell):
npm install -g @angular/cli

✅ Check version:
ng version

📘 What is Angular CLI?
It helps scaffold Angular apps, components, services, etc.
Like ng new, ng serve, ng generate component, etc.

3️⃣ Install .NET SDK
Required to create ASP.NET Core applications.

📥 Download:
👉 https://dotnet.microsoft.com/en-us/download

Choose .NET 8 SDK (Recommended)

✅ Check:
dotnet --version

📘 What is .NET SDK?
It contains all the tools and runtime to create and run ASP.NET Core applications (MVC/Web APIs).

4️⃣ Install IDEs
Choose based on your project type:

IDE	Purpose	Link
Visual Studio Code	For Angular apps	https://code.visualstudio.com
Visual Studio 2022+ (Community Edition)	For ASP.NET Core	https://visualstudio.microsoft.com/
➡️ In Visual Studio, install the ASP.NET and web development workload during setup.

🔹 Part 2: Create First Angular App

Note: Angular from version 17 onward (you’re on 19.2.6) introduced a standalone API, allowing you to create Angular applications without NgModules. 
Instead of defining components inside a @NgModule, everything is handled via standalone components and app configuration files.

⚔️ Standalone vs No-Standalone in Angular 17+

Feature	            Standalone (default from Angular 17+)	      No-Standalone (Traditional Module-Based)

Introduced in	      Angular 14 (mature in Angular 17+)	            Angular since version 2
Project creation	      ng new myapp (default standalone)	            ng new myapp --no-standalone
Main file	             main.ts uses bootstrapApplication()	      main.ts uses bootstrapModule(AppModule)
AppModule file	      ❌ Not created or needed	                  ✅ Required: app.module.ts
app.config.ts	      ✅ Used for providers and routes      	      ❌ Not used
Component setup	      standalone: true in @Component	            No need for standalone: true
Imports in components	Must import other components/pipes directly	Imports managed via NgModule
Routing setup	      Via provideRouter() in app.config.ts	      Via RouterModule.forRoot() in AppModule
Performance	            Better tree-shaking and lazy-loading	      Slightly more overhead
Learning curve	      Slightly new pattern	                        Familiar for most tutorials/interviews
Flexibility	            More fine-grained, modular	                  Centralized structure
Angular CLI default	✅ From Angular 17+	                        ❌ Must use --no-standalone flag


🔍 Example Comparison

✅ Standalone Component:
@Component({
  standalone: true,
  selector: 'app-hello',
  template: `<h1>Hello</h1>`,
  imports: [CommonModule] // You import dependencies directly
})
export class HelloComponent {}

❌ Traditional (No-Standalone) Component:
@Component({
  selector: 'app-hello',
  template: `<h1>Hello</h1>`
})
export class HelloComponent {}

// Declared inside AppModule
@NgModule({
  declarations: [HelloComponent]
})
export class AppModule {}

🧠 When to Use What?
You Should Use...	      If You Want To...
✅ Standalone	      Build modern, modular apps with less boilerplate
✅ Standalone	      Learn cutting-edge Angular features
❌ No-Standalone	      Follow traditional tutorials or interview patterns
❌ No-Standalone	      Work on legacy codebases or large enterprise apps
🔧 How to Choose       While Creating a Project

✅ Standalone (Default in Angular 17+):
ng new my-app

❌ No-Standalone (Classic AppModule-based):
ng new my-app --no-standalone


▶️ Step-by-step:

Open terminal:
ng new demo-angular-app --no-standalone

Choose:
Yes for routing

CSS for styling (or SCSS if familiar)

N for Do you want to enable Server-Side Rendering (SSR) and Static Site Generation (SSG/Prerendering)? (y/N)

      🤔 What Does It Mean?
      SSR (Server-Side Rendering): Angular renders the app on the server before sending it to the client. Improves SEO & load time.
      
      SSG (Static Site Generation): Pre-renders some or all of your app pages at build time.
      
      ✅ What Should You Choose (as a Beginner)?
      📌 Answer: N (or just press Enter)
      
      💡 Reason: For now, you're learning Angular basics with ASP.NET Core as backend. SSR/SSG is an advanced topic mainly useful for SEO-focused sites like blogs, portfolios, etc.
      
      🧠 When to use SSR/SSG?
      Use it later when:      
      You build content-heavy sites (e.g., e-commerce, blogs)
      You care about SEO for public pages
      You want faster first-page load performance
      


Move into the project folder:
cd my-angular-app
ng serve

Open browser:
🔗 http://localhost:4200

🔍 Learn Angular Structure:
File/Folder	Purpose
main.ts	Entry point of app
app.module.ts	Registers components & modules
app.component.ts/html	Root component with HTML view
angular.json	Config & build settings

📘 Beginner Article:
🔗 Angular Getting Started
🔗 Tour of Heroes (Full Guide)

🔹 Part 3: Create First ASP.NET Core MVC App

▶️ Steps (Using Visual Studio):
Open Visual Studio → Create New Project
Choose: ASP.NET Core Web App (Model-View-Controller)
Name it: MyAspNetMvcApp
Framework: .NET 8

Click Create

▶️ Run the app
Click Run (F5 or Ctrl+F5)

It opens in browser → default landing page

🔍 Understand MVC Structure:
Folder	Purpose
Controllers/	C# classes handling requests
Views/	Razor HTML files (.cshtml)
Models/	Classes representing your data
Program.cs	App startup logic
📘 Beginner Resources:

🔗 Microsoft Learn - Intro to ASP.NET Core MVC

📺 YouTube: ASP.NET Core MVC Crash Course

🔹 Part 4: Architecture Overview
✅ Angular (Frontend SPA Framework)
📘 Core Concepts:

Components = UI blocks

Modules = Group of components

Services = Shared logic (API calls)

Routing = Navigation between views

🎨 Angular is a Single Page Application framework. It renders dynamic content without reloading the whole page.


🔗 Angular Architecture Explained

✅ ASP.NET Core MVC (Backend Web Framework)
📘 Core Concepts:

Model = Represents your data

View = HTML with Razor syntax

Controller = Handles user request

📘 It's a server-side framework that generates HTML dynamically and returns it to browser.

🔗 ASP.NET Core MVC Explained

🔚 Day 1 Summary
Task	Completed
Node.js + Angular CLI installed	✅
.NET SDK installed	✅
IDEs installed	✅
First Angular app created	✅
First ASP.NET Core MVC app created	✅
Understood both architectures	✅
