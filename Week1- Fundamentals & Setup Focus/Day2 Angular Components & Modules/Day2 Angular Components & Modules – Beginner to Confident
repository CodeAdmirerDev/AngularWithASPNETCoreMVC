✅ Day 2: Angular Components & Modules – Beginner to Confident!

📌 1. What is a Component in Angular?
A component is the basic building block of an Angular app. It controls a part of the UI.
(OR)
A component is the heart of Angular apps. It controls a section of the UI.

Each component has:
HTML Template – Defines the view
TypeScript Class – Contains data and logic
CSS/SCSS File – Styles for the component
Metadata (Decorator) – Provided by @Component

🧱 Example:
ng generate component my-profile

It creates:
my-profile.component.ts
my-profile.component.html
my-profile.component.css
my-profile.component.spec.ts (test file)

💻 Sample Component

// my-profile.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-my-profile',
  templateUrl: './my-profile.component.html',
  styleUrls: ['./my-profile.component.css']
})
export class MyProfileComponent {
  name: string = 'Suri';
  greet() {
    alert('Welcome, ' + this.name + '!');
  }
}

<!-- my-profile.component.html -->
<h2>Hello, {{ name }}</h2>
<button (click)="greet()">Greet Me</button>
✅ Uses interpolation ({{ name }})
✅ Uses event binding ((click)="greet()")

🧱 2. Creating a Component
Angular CLI makes this super easy.

ng generate component my-profile
# or shorthand
ng g c my-profile

This creates a folder like:
src/app/my-profile/
  ├── my-profile.component.ts
  ├── my-profile.component.html
  ├── my-profile.component.css
  └── my-profile.component.spec.ts (for testing)
👉 The new component is auto-declared in AppModule.

🧩 3. Understanding AppModule (Root Module)

AppModule is the entry point module for any Angular app.
✅ What It Does:
Declares all components
Imports other modules
Boots the root component

Every Angular app has a root module called AppModule located at:
📁 Location: src/app/app.module.ts

// app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { MyProfileComponent } from './my-profile/my-profile.component';

@NgModule({
  declarations: [
    AppComponent,
    MyProfileComponent   // 👈 You must declare components here
  ],
  imports: [
    BrowserModule
  ],
  bootstrap: [AppComponent]  // 👈 AppComponent is the root
})
export class AppModule { }
💡 Think of this as the "index page" where Angular knows what parts exist in your app.
🧩 You can think of AppModule as the main control center of the app.


🔗 4. Data Binding Explained (Latest Angular)
Data binding = Sync between TS (class) and HTML (template).

📍 A. Interpolation ({{ value }})
Used to display data from class to HTML.

export class MyProfileComponent {
  userName: string = 'CodeAdmirer';
}

<p>Welcome {{ userName }}!</p>
✅ Output:
Welcome CodeAdmirer!

📍 B. Event Binding ((event)="method()")
Used to handle user actions, like clicks.

export class MyProfileComponent {
  sayHello() {
    alert('Hello Angular!');
  }
}

<button (click)="sayHello()">Say Hello</button>
✅ When clicked → it runs sayHello() from the class.

🧠 Bonus Tips for Beginners
Every component must be declared in a module (usually AppModule)
Use CLI to avoid mistakes (ng g c your-component-name)
You can have multiple components, but only one root component


🛠️ Practical Assignment
Create a component called user-info:

ng g c user-info
In user-info.component.ts:

export class UserInfoComponent {
  name = 'CodeAdmirer';
  city = 'Hyderabad';

  showDetails() {
    alert(`${this.name} is from ${this.city}`);
  }
}

In user-info.component.html:

<h3>User: {{ name }}</h3>
<p>City: {{ city }}</p>
<button (click)="showDetails()">Show Details</button>

👉 Run app:
ng serve

🧠 Recap - Key Takeaways:
Concept	Use:
============

Component	    => Core building block of Angular UI
AppModule	    => Registers all components/modules
Interpolation	=> Display variables in template
Event Binding	=> Handle events like button clicks
Angular CLI	  => Fastest way to create/manage components
