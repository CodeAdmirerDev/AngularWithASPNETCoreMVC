Day 11: Angular HTTPClient & Web API Interaction

Overview
Angular’s HttpClient is a core service that allows you to make HTTP requests to back-end services (APIs). 
It is built on RxJS Observables, which provide powerful capabilities like asynchronous event handling, 
operators for data transformation, and error handling.

1. Understanding Angular HttpClient

  What is HttpClient?
    Angular’s modern way to make HTTP calls, available in @angular/common/http.
    It replaces the older Http module.
    Uses Observables from RxJS for handling asynchronous operations.
  
  Why use HttpClient?
    Supports typed request and response objects.
    JSON by default; no need for manual parsing.
    Simplifies error handling.
    Supports interceptors for request/response manipulation.

2. Setting Up HttpClient in Angular

Step 1: Import HttpClientModule
import { HttpClientModule } from '@angular/common/http';  

@NgModule({  
  imports: [  
    // other imports  
    HttpClientModule  
  ],  
  ...  
})  
export class AppModule { }  

3. Using HttpClient to Call Web APIs

Step 2: Inject HttpClient in Your Service
Create a service (recommended for separation of concerns):
ng generate service api  

Inside the service:
import { Injectable } from '@angular/core';  
import { HttpClient } from '@angular/common/http';  
import { Observable } from 'rxjs';  

@Injectable({ providedIn: 'root' })  
export class ApiService {  

  private apiUrl = 'https://jsonplaceholder.typicode.com/posts'; // example API  

  constructor(private http: HttpClient) { }  

  getPosts(): Observable<Post[]> {  
    return this.http.get<Post[]>(this.apiUrl);  
  }  

  getPost(id: number): Observable<Post> {  
    return this.http.get<Post>(`${this.apiUrl}/${id}`);  
  }  

  createPost(post: Post): Observable<Post> {  
    return this.http.post<Post>(this.apiUrl, post);  
  }  

  updatePost(post: Post): Observable<Post> {  
    return this.http.put<Post>(`${this.apiUrl}/${post.id}`, post);  
  }  

  deletePost(id: number): Observable<any> {  
    return this.http.delete(`${this.apiUrl}/${id}`);  
  }  
}  
Note: Replace Post with your own interface/model.

Step 3: Define Interface for Type Safety (optional but recommended)
export interface Post {  
  id?: number;  
  title: string;  
  body: string;  
  userId: number;  
}  

4. Subscribing to Observables in Components
Services return Observables, you need to subscribe to get data:

import { Component, OnInit } from '@angular/core';  
import { ApiService, Post } from '../api.service';  

@Component({  
  selector: 'app-post-list',  
  template: `  
    <ul>  
      <li *ngFor="let post of posts">{{ post.title }}</li>  
    </ul>  
  `  
})  
export class PostListComponent implements OnInit {  
  posts: Post[] = [];  

  constructor(private apiService: ApiService) { }  

  ngOnInit() {  
    this.apiService.getPosts().subscribe({  
      next: (data) => this.posts = data,  
      error: (err) => console.error('Error loading posts', err),  
      complete: () => console.log('Request completed')  
    });  
  }  
}  

Why use subscribe?
Observables are lazy; subscribing triggers the HTTP call.
You handle three callbacks via an object or separate: next, error, and complete.

5. Error Handling in HttpClient Calls
Common Errors
Network errors (timeout, no connection)
Backend returned error code (404, 500, etc.)

Basic Error Handling
Use RxJS catchError operator in the service:

import { catchError } from 'rxjs/operators';  
import { throwError } from 'rxjs';  

getPosts(): Observable<Post[]> {  
  return this.http.get<Post[]>(this.apiUrl)  
    .pipe(  
      catchError(this.handleError)  
    );  
}  

private handleError(error: any) {  
  let errorMessage = '';  
  if (error.error instanceof ErrorEvent) {  
    // Client-side error  
    errorMessage = `Error: ${error.error.message}`;  
  } else {  
    // Server-side error  
    errorMessage = `Error Code: ${error.status}\nMessage: ${error.message}`;  
  }  
  console.error(errorMessage);  
  return throwError(() => errorMessage);  
}  
When an error is caught, throwError re-throws it so the component can handle/display.

6. Step-by-Step Process to Become Beginner to Expert

Beginner
Learn the basics of Angular services and dependency injection.
Understand Observables and subscribing in Angular.
Import HttpClientModule and create simple GET requests.
Use basic subscribe with ‘next’ and ‘error’ callbacks.

Intermediate
Handle POST, PUT, DELETE requests using HttpClient.
Use RxJS operators like catchError, map, tap to do complex transformations and error handling.
Create reusable services that handle API logic and isolate HTTP calls.
Learn about HttpParams for query parameters, HttpHeaders for custom headers.

Expert
Implement HTTP interceptors to modify requests and responses (e.g., auth tokens, logging).
Optimize performance: cache responses, debounce input for search APIs, cancel previous requests using switchMap.
Handle global error handling with interceptors.
Implement retry logic on failed requests.
Write comprehensive unit tests for HTTP services using HttpTestingController.

7. Best Practices
Use services to encapsulate all HTTP logic — avoids cluttering components.
Always type your responses for better code maintainability and IntelliSense support.
Use RxJS operators instead of nested subscriptions.
Handle errors gracefully, provide meaningful user feedback.
Unsubscribe properly if the Observable does not complete (usually HttpClient Observables complete after one emission, so usually no unsub needed).
Use interceptors for cross-cutting concerns like authentication tokens and logging.
Avoid side effects inside services; use pure functions or tap.
Secure your APIs by adding proper headers and authorization.
Use environment variables for API URLs for easy config changes between dev/prod.

Summary
Topic	              Key Points
HttpClient          Setup	Import HttpClientModule, inject in services
HTTP Methods	      GET, POST, PUT, DELETE using typed responses
Subscribing	        subscribe({ next, error, complete }) pattern
Error Handling	    Use catchError in service with custom error logic
RxJS Operators	    map, catchError, tap, switchMap
Advanced Topics	    Interceptors, retry, request cancellation
Best Practices	    Services, type safety, environment config, interceptors

