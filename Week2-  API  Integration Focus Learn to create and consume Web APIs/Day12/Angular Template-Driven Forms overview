Here’s a detailed guide to Angular Template-Driven Forms, focusing on FormsModule, ngModel, and validation, plus a step-by-step learning path from beginner to expert and best practices.

Angular Forms - Template Driven Approach

1. Overview
Angular offers two main ways to work with forms:
Template-driven forms: form logic primarily in the template (HTML).
Reactive forms: more programmatic, driven by component code.

This guide focuses on template-driven forms, which are easier for beginners, and utilize the FormsModule.

2. FormsModule
What is FormsModule?
FormsModule is an Angular module that contains directives and providers to create template-driven forms.

How to use it?
You must import FormsModule in your Angular module to enable template-driven form features like ngModel.


import { FormsModule } from '@angular/forms';  

@NgModule({  
  imports: [  
    FormsModule,  
    // other imports  
  ],  
  // ...  
})  
export class AppModule {}  

3. ngModel
What is ngModel?
ngModel is a directive that binds an input field in the template to a property in the component, creating two-way data binding.

How does it work?
<input [(ngModel)]="userName" name="userName" />  

The userName property in the component updates whenever the input changes.
The input's value updates when userName changes.

Important: When using ngModel inside forms, always add a name attribute — Angular needs this to register the control.

4. Validation in Template-Driven Forms

Angular forms support:

HTML5 validations: required, minlength, maxlength, pattern, email, etc.

Angular-specific validators: Automatically applied via attributes (like required).

Custom validation: You can create your own validation directive if needed.

Fields have control states:
touched
untouched
pristine
dirty
valid
invalid

You can use these states in the template to conditionally display validation messages.

Example:
<form #myForm="ngForm" (ngSubmit)="onSubmit(myForm.value)">  
  <input   
    name="email"   
    [(ngModel)]="email"   
    required   
    email   
    #emailField="ngModel" />  
  
  <div *ngIf="emailField.invalid && (emailField.dirty || emailField.touched)">  
    <small *ngIf="emailField.errors?.required">Email is required.</small>  
    <small *ngIf="emailField.errors?.email">Invalid email format.</small>  
  </div>  

  <button [disabled]="myForm.invalid">Submit</button>  
</form>  

Step-by-step Process: From Beginner to Expert

Step 1: Basic Setup & Understanding FormsModule
Import FormsModule in your root module.
Learn how ngModel works for two-way binding.
Create simple forms with inputs bound to component properties.

Step 2: Add Form Validation
Use built-in HTML5 validators (required, minlength, etc.)
Display error messages based on control state (touched, dirty, etc.)
Learn to disable submit buttons when the form is invalid.

Step 3: Learn Form State and Validation Details
Understand form and control states (pristine, dirty, touched, etc.)
Play with form validation feedback UI.

Step 4: Nested Forms and Complex Form Controls
Explore usage of <ngModelGroup> to group controls.
Use multiple inputs and validation scenarios.

Step 5: Custom Validators & Async Validation
Write custom validator directives.
Learn about asynchronous validation (e.g., username availability).

Step 6: Form Submission and Resetting the Form
Handle form submission properly.
Reset form and form controls programmatically.

Step 7: Dynamic Forms with Template Driven Approach
Add and remove form controls dynamically using Angular's features.

Step 8: Best Practices & Optimization
Best Practices for Template-Driven Forms
Always import FormsModule when using template-driven forms.
Assign a unique name attribute to each form control for proper registration.
Use #ref="ngModel" variables to access form control states.
Bind forms to models (avoid manipulating DOM values directly).
Perform validation with built-in and custom validators.
Use meaningful validation messages that help users fix errors.
Manage form submission carefully; disable submit buttons until valid.
Avoid complex logic inside templates — prefer moving logic to component class if needed.
For large or performance-critical forms, consider switching to Reactive Forms for better control.
Reset or pre-populate form properly using Angular methods like form.reset() or setting component model properties.

Below is a full Angular 19 non-standalone project example demonstrating the step-by-step template-driven forms concepts we discussed:

What this project demonstrates:
Step 1: Basic two-way binding with ngModel.
Step 2: Built-in validations like required, minlength.
Step 3: Control states (dirty, touched) used for validation feedback.
Step 4: Nested groups of form controls using ngModelGroup.
Step 5: Custom validation directive (noSpaces).
Step 6: Form submission + reset handling.
Step 7: Dynamic form controls (phone numbers).
Step 8: Best practices like appropriate name, usage of #ref="ngModel".

Project Structure

my-angular-app/  
│  
├── src/  
│   ├── app/  
│   │   ├── app.component.ts  
│   │   ├── app.component.html  
│   │   ├── app.module.ts  
│   │   └── no-spaces.validator.ts  
│   ├── main.ts  
│   └── index.html  
│  
├── angular.json  
├── package.json  
└── tsconfig.json  

1. app.module.ts

import { NgModule } from '@angular/core';  
import { BrowserModule } from '@angular/platform-browser';  
import { FormsModule } from '@angular/forms';  

import { AppComponent } from './app.component';  
import { NoSpacesValidatorDirective } from './no-spaces.validator';  

@NgModule({  
  declarations: [  
    AppComponent,  
    NoSpacesValidatorDirective  
  ],  
  imports: [  
    BrowserModule,  
    FormsModule  -- Add this
  ],  
  bootstrap: [AppComponent]  
})  
export class AppModule { }  

2. app.component.ts

import { Component } from '@angular/core';  
@Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html'  
})  
export class AppComponent {  
  // Step 1 & 2: Basic properties & validation  
  userName = '';  
  email = '';  
  age: number | null = null;  

  // Step 7: Dynamic phones list  
  phones: string[] = [''];  

  // Add phone input  
  addPhone() {  
    this.phones.push('');  
  }  

  // Remove phone input  
  removePhone(index: number) {  
    this.phones.splice(index, 1);  
  }  

  onSubmit(form: any) {  
 alert('form data saved!');
    this.userName = '';  
    this.email = '';  
    this.age = null;  
    this.phones = [''];  
  }  

  onReset(form: any) {  
    form.reset();  
    this.userName = '';  
    this.email = '';  
    this.age = null;  
    this.phones = [''];  
  }  
}  

3. app.component.html

<form #myForm="ngForm" (ngSubmit)="onSubmit(myForm)" novalidate>  

    <!-- Step 1 & 2: Username with validation -->  
    <label>Username:</label>  
    <input   
      type="text"   
      name="userName"   
      [(ngModel)]="userName"   
      noSpaces   
      required   
      minlength="3"   
      #userNameField="ngModel" />  
    
    <div *ngIf="userNameField.invalid && (userNameField.dirty || userNameField.touched)">  
      <small *ngIf="userNameField.errors?.['required']">Username is required.</small>  
      <small *ngIf="userNameField.errors?.['minlength']">Username must be at least 3 characters.</small>  
      <small *ngIf="userNameField.errors?.['noSpaces']">No spaces allowed in username.</small>  
    </div>  
    
    <br />  
  
    <!-- Step 3: Email with validation and form control states -->  
    <label>Email:</label>  
    <input   
      type="email"   
      name="email"   
      [(ngModel)]="email"   
      required   
      email   
      #emailField="ngModel" />  
    
    <div *ngIf="emailField.invalid && (emailField.dirty || emailField.touched)">  
      <small *ngIf="emailField.errors?.['required']">Email is required.</small>  
      <small *ngIf="emailField.errors?.['email']">Invalid email format.</small>  
    </div>  
    <p>  
      Status:   
      Pristine: {{emailField.pristine}},   
      Dirty: {{emailField.dirty}},   
      Touched: {{emailField.touched}}  
    </p>  
  
    <br />  
  
    <!-- Step 4: Nested address group -->  
    <div ngModelGroup name="address">  
      <label>Street:</label>  
      <input   
        type="text"   
        name="street"   
        ngModel  
        required  
        #streetField="ngModel" />  
      
      <div *ngIf="streetField.invalid && (streetField.dirty || streetField.touched)">  
        <small *ngIf="streetField.errors?.['required']">Street is required.</small>  
      </div>  
  
      <label>City:</label>  
      <input type="text" name="city" ngModel />  
    </div>  
  
    <br />  
  
    <!-- Age input with min/max validation -->  
    <label>Age:</label>  
    <input   
      type="number"   
      name="age"   
      [(ngModel)]="age"   
      min="18"   
      max="99"  
      #ageField="ngModel" />  
    
    <div *ngIf="ageField.invalid && (ageField.dirty || ageField.touched)">  
      <small *ngIf="ageField.errors?.['min']">Age must be at least 18.</small>  
      <small *ngIf="ageField.errors?.['max']">Age cannot exceed 99.</small>  
    </div>  
  
    <br />  
  
    <!-- Step 7: Dynamic phone numbers -->  
    <div *ngFor="let phone of phones; let i = index">  
      <label>Phone {{i + 1}}:</label>  
      <input   
        type="text"   
        name="phone{{i}}"   
        [(ngModel)]="phones[i]"   
        required  
        #phoneField="ngModel" />  
  
      <button type="button" (click)="removePhone(i)" *ngIf="phones.length > 1">Remove</button>  
  
      <div *ngIf="phoneField.invalid && (phoneField.dirty || phoneField.touched)">  
        <small *ngIf="phoneField.errors?.['required']">Phone number is required.</small>  
      </div>  
    </div>  
  
    <button type="button" (click)="addPhone()">Add Phone</button>  
  
    <br /><br />  
  
    <!-- Submit & Reset -->  
    <button type="submit" [disabled]="myForm.invalid">Submit</button>  
    <button type="button" (click)="onReset(myForm)">Reset</button>  
  
  </form>  
  

4. no-spaces.validator.ts (Custom validator directive)
import { Directive } from '@angular/core';  
import { NG_VALIDATORS, Validator, AbstractControl, ValidationErrors } from '@angular/forms';  

@Directive({  
  selector: '[noSpaces]',  
  providers: [{ provide: NG_VALIDATORS, useExisting: NoSpacesValidatorDirective, multi: true }]  
})  
export class NoSpacesValidatorDirective implements Validator {  
  validate(control: AbstractControl): ValidationErrors | null {  
    if (control.value && control.value.indexOf(' ') >= 0) {  
      return { noSpaces: true };  
    }  
    return null;  
  }  
}  

5. Other files
main.ts, index.html, angular.json etc. are standard Angular CLI files you get with ng new.

How to Run
Create a new Angular project (skip default files or overwrite).
Replace app.module.ts, app.component.ts, app.component.html and add no-spaces.validator.ts file as above.

Run:
npm install  
ng serve  
Navigate to http://localhost:4200 and test the form.
