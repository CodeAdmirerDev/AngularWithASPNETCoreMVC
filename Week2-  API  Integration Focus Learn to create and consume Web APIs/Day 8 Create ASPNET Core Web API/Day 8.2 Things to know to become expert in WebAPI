üß† Expert Stage: Build a Production-Ready ASP.NET Core Web API

üìö Key Concepts Overview
Area	                            Description
üî• Global Exception Middleware	Centralized error handling
üìù Serilog	                    Structured & file-based logging
üîê JWT Authentication	          Secure APIs with bearer tokens
üß¨ AutoMapper	                  Handle complex DTO mappings
üì¶ API                         Versioning	v1/v2 via route or headers
üß™ Unit Testing	                xUnit + Moq for test coverage
üìä Pagination & Filtering      	Clean, performant querying

‚úÖ Step-by-Step Guide

1Ô∏è‚É£ Add Serilog Logging
dotnet add package Serilog.AspNetCore
dotnet add package Serilog.Sinks.File
dotnet add package Serilog.Sinks.Console

üìÅ Program.cs
using Serilog;

Log.Logger = new LoggerConfiguration()
    .WriteTo.Console()
    .WriteTo.File("Logs/log.txt", rollingInterval: RollingInterval.Day)
    .CreateLogger();

builder.Host.UseSerilog();

2Ô∏è‚É£ Add Global Exception Middleware
üìÅ Middlewares/ExceptionMiddleware.cs

public class ExceptionMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<ExceptionMiddleware> _logger;

    public ExceptionMiddleware(RequestDelegate next, ILogger<ExceptionMiddleware> logger)
    {
        _next = next;
        _logger = logger;
    }

    public async Task Invoke(HttpContext context)
    {
        try
        {
            await _next(context);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Unhandled Exception");
            context.Response.StatusCode = 500;
            await context.Response.WriteAsJsonAsync(new { message = "Something went wrong." });
        }
    }
}

üìå In Program.cs
app.UseMiddleware<ExceptionMiddleware>();

3Ô∏è‚É£ Add JWT Authentication

dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer

üìÅ Program.cs

builder.Services.AddAuthentication("Bearer")
    .AddJwtBearer("Bearer", options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = "yourapp",
            ValidAudience = "yourapp",
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("YourSuperSecretKey"))
        };
    });

app.UseAuthentication();
app.UseAuthorization();

üìå Secure endpoint:

[Authorize]
[HttpGet]
public IActionResult SecureEndpoint() => Ok("This is protected.");

4Ô∏è‚É£ Add API Versioning

dotnet add package Microsoft.AspNetCore.Mvc.Versioning

üìÅ Program.cs

builder.Services.AddApiVersioning(options =>
{
    options.DefaultApiVersion = new ApiVersion(1, 0);
    options.AssumeDefaultVersionWhenUnspecified = true;
    options.ReportApiVersions = true;
});

üìå In Controller:

[ApiVersion("1.0")]
[Route("api/v{version:apiVersion}/[controller]")]
public class ProductsController : ControllerBase

5Ô∏è‚É£ Customize Swagger

dotnet add package Swashbuckle.AspNetCore

üìÅ Program.cs

builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new() { Title = "Product API", Version = "v1" });

    var securityScheme = new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.Http,
        Scheme = "bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "JWT Authorization header using the Bearer scheme"
    };
    options.AddSecurityDefinition("Bearer", securityScheme);
    options.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        { securityScheme, new[] { "Bearer" } }
    });
});

6Ô∏è‚É£ Add Advanced AutoMapper Profiles

public class ProductProfile : Profile
{
    public ProductProfile()
    {
        CreateMap<Product, ProductDto>()
            .ForMember(dest => dest.PriceWithTax, opt => opt.MapFrom(src => src.Price * 1.18M));
    }
}

7Ô∏è‚É£ Add Pagination & Filtering
[HttpGet("paged")]
public async Task<IActionResult> GetPaged([FromQuery] int page = 1, [FromQuery] int size = 10)
{
    var data = await _service.GetAllAsync();
    var paged = data.Skip((page - 1) * size).Take(size);
    return Ok(paged);
}

8Ô∏è‚É£ Add Unit Testing with xUnit and Moq
dotnet new xunit -n ProductApi.Tests
dotnet add ProductApi.Tests reference ProductApi
dotnet add ProductApi.Tests package Moq

Sample test:

public class ProductsControllerTests
{
    [Fact]
    public async Task GetAll_ReturnsOkResult_WithListOfProducts()
    {
        var mockService = new Mock<IProductService>();
        mockService.Setup(s => s.GetAllAsync()).ReturnsAsync(new List<Product>());
        var controller = new ProductsController(mockService.Object, new Mock<IMapper>().Object);

        var result = await controller.GetAll();
        Assert.IsType<OkObjectResult>(result);
    }
}

‚úÖ Best Practices Summary Table
Area	                                Best Practice
Routing	                              api/v1/products/{id}
DTOs	                                Always use DTOs
Model Validation	                    Use [Required], check ModelState.IsValid
Status Codes	                        200 OK, 201 Created, 400 BadRequest, 404 NotFound, 500 InternalServerError
DI	                                  Register services using interfaces
Global Exception Handling	            Use middleware
Logging	                              Use Serilog with structured output
Security	                            JWT Bearer Auth
Versioning	                          Via routes or headers
Documentation	                        Use Swagger with token support
