Day 8: ASP.NET Core Web API focusing on:

🔥 Topics to Cover:
✅ [ApiController] — what it is and why it's useful
✅ [HttpGet], [HttpPost] — how to use these HTTP verb attributes
✅ DTOs — Data Transfer Objects
✅ Step-by-step learning path — Beginner ➜ Intermediate ➜ Expert
✅ Best practices at every level

🎯 1. [ApiController] Attribute

✅ What It Does:
Applies automatic model validation
Simplifies parameter binding
Returns 400 Bad Request automatically if the model is invalid

📌 Example:
[ApiController]
[Route("api/[controller]")]
public class ProductsController : ControllerBase
{
    [HttpGet]
    public IActionResult GetProducts() => Ok("Product list");
}

🎯 2. [HttpGet] & [HttpPost]

Attribute	    Purpose
[HttpGet]	    Read/Fetch data
[HttpPost]	  Submit/Insert data

📌 Example:
[HttpGet("{id}")]
public IActionResult GetById(int id)
{
    return Ok(new { Id = id, Name = "Laptop" });
}

[HttpPost]
public IActionResult CreateProduct([FromBody] ProductDto product)
{
    if (!ModelState.IsValid) return BadRequest(ModelState);
    return Ok(product);
}

🎯 3. DTOs (Data Transfer Objects)

✅ Why use DTOs?
Avoid exposing your EF Core models directly
Control what data you send/receive
Improve security and API clarity

📌 Example:
public class ProductDto
{
    [Required]
    public string Name { get; set; }
    
    [Range(1, 10000)]
    public decimal Price { get; set; }
}

🚀 4. Step-by-Step Learning Path (Beginner ➜ Expert)

🧑‍🎓 Beginner Stage
🎯 Learn how to create a Web API with DTOs and test using Swagger or Postman

📚 Key Concepts:
Create Web API Project
[ApiController] usage
Routing: [Route], [HttpGet/Post]
Return simple JSON
Accept JSON body using [FromBody]
Use DTOs with [Required], [Range] validation

✅ Tasks:
dotnet new webapi -n MyFirstApi
🔹 Create ProductDto.cs
🔹 Add ProductsController.cs
🔹 Use Swagger to test

🧪 Tools:
Swagger UI (built-in)
Postman (API testing)

🛠️ Intermediate Stage
🎯 Connect Web API to a database using EF Core and do full CRUD with DTOs

📚 Key Concepts:
EF Core (DbContext, Migrations)
Model vs DTO
Mapping (manual or AutoMapper)
Validation using DataAnnotations
Dependency Injection for Services

✅ Tasks:
Add Product EF model
Map it to/from ProductDto
Inject service layer
Use DbContext for DB operations
Add [FromRoute], [FromQuery] examples

🧠 Expert Stage
🎯 Build a production-ready API with logging, exception handling, and security

📚 Key Concepts:
Global Exception Middleware
Logging (Serilog)
Authentication (JWT tokens)
API Versioning
AutoMapper for complex DTO mappings
Unit Testing (xUnit, Moq)
Pagination & Filtering

✅ Tasks:
Add Serilog for logging
Secure API with JWT
Add AutoMapper profile
Create unit tests for controllers
Add Swagger customization and versioning

✅ Best Practices
Area	Best Practice
✅ Routing	Use consistent RESTful routes (e.g., /api/products/{id})
✅ DTOs	Use DTOs always, avoid exposing entities
✅ Model Validation	Use [Required], [Range] in DTOs, validate with ModelState.IsValid
✅ Status Codes	Return appropriate responses: 200, 201, 400, 404, 500
✅ Dependency Injection	Use services/repositories via DI
✅ Exception Handling	Use global exception middleware
✅ Logging	Use structured logging with Serilog/NLog
✅ Security	Use JWT Bearer Token Authentication
✅ Versioning	Use v1, v2 in routes or headers
✅ Documentation	Use Swagger (OpenAPI) and customize it
