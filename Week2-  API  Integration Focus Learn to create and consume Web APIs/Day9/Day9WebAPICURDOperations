Let’s make Day 9 a solid step in your journey to mastering CRUD APIs (GET, POST, PUT, DELETE) using ASP.NET Core 8 Web API, with Swagger/Postman for testing.

🔥 Goal for Day 9:
✅ Build and test CRUD APIs
✅ Understand and implement GET, POST, PUT, DELETE methods
✅ Learn Swagger and Postman for API testing
✅ Follow best practices to write clean, maintainable code

📚 Study Material
📘 Official Documentation:

ASP.NET Core Web API Docs
https://learn.microsoft.com/en-us/aspnet/core/web-api/?view=aspnetcore-8.0 

Swagger/OpenAPI in ASP.NET Core
https://learn.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-8.0&tabs=visual-studio

🎥 Video Tutorials:
YouTube: ASP.NET Core Web API CRUD Tutorial
YouTube: Postman API Testing Tutorial for Beginners

🧠 Key Concepts

Method	      Usage	        Description
GET	          Read	        Fetch data from server
POST	        Create	      Insert new record
PUT	          Update	      Modify existing record
DELETE	      Delete	      Remove record from server

🛠️ Step-by-Step Guide
✅ Step 1: Create a Web API Project
dotnet new webapi -n CrudApiDemo
cd CrudApiDemo

🎯 Make sure WeatherForecastController.cs is removed. Create your own controller.

✅ Step 2: Create a Model (e.g., Product)

public class Product
{
    public int Id { get; set; }
    public string Name { get; set; }
    public double Price { get; set; }
}

✅ Step 3: Create a Repository (In-Memory for now)

public static class ProductRepo
{
    public static List<Product> Products { get; set; } = new List<Product>
    {
        new Product { Id = 1, Name = "Laptop", Price = 75000 },
        new Product { Id = 2, Name = "Mouse", Price = 1500 }
    };
}

✅ Step 4: Create Controller – ProductController

[ApiController]
[Route("api/[controller]")]
public class ProductController : ControllerBase
{
    // GET: api/product
    [HttpGet]
    public ActionResult<IEnumerable<Product>> GetAll()
    {
        return Ok(ProductRepo.Products);
    }

    // GET: api/product/1
    [HttpGet("{id}")]
    public ActionResult<Product> GetById(int id)
    {
        var product = ProductRepo.Products.FirstOrDefault(p => p.Id == id);
        if (product == null) return NotFound();
        return Ok(product);
    }

    // POST: api/product
    [HttpPost]
    public ActionResult<Product> Create(Product product)
    {
        product.Id = ProductRepo.Products.Max(p => p.Id) + 1;
        ProductRepo.Products.Add(product);
        return CreatedAtAction(nameof(GetById), new { id = product.Id }, product);
    }

    // PUT: api/product/1
    [HttpPut("{id}")]
    public IActionResult Update(int id, Product updatedProduct)
    {
        var product = ProductRepo.Products.FirstOrDefault(p => p.Id == id);
        if (product == null) return NotFound();

        product.Name = updatedProduct.Name;
        product.Price = updatedProduct.Price;
        return NoContent();
    }

    // DELETE: api/product/1
    [HttpDelete("{id}")]
    public IActionResult Delete(int id)
    {
        var product = ProductRepo.Products.FirstOrDefault(p => p.Id == id);
        if (product == null) return NotFound();

        ProductRepo.Products.Remove(product);
        return NoContent();
    }
}

✅ Step 5: Run and Test in Swagger

dotnet run
Visit: https://localhost:5001/swagger/index.html

Use Swagger UI to test each API (GET, POST, PUT, DELETE)

✅ Step 6: Test with Postman
Open Postman → create a new Collection.

Use GET, POST, PUT, DELETE requests on:

GET → https://localhost:5001/api/product
POST → https://localhost:5001/api/product

{
  "name": "Keyboard",
  "price": 1200
}

PUT → https://localhost:5001/api/product/1

DELETE → https://localhost:5001/api/product/2

🧾 Best Practices
✅ Use DTOs for external API models (avoid exposing internal entities directly)
✅ Use dependency injection for services and repositories
✅ Add Model validation using [Required], [Range] etc.
✅ Use Status Codes properly: 200 OK, 201 Created, 204 NoContent, 404 NotFound
✅ Add logging using ILogger
✅ Keep controller thin and push logic to services
✅ Use Global exception middleware for better error handling
✅ Secure APIs with Authentication & Authorization (later stages)
✅ Add unit tests using xUnit and Moq (in advanced stage)

🚀 Path to Expertise

Level	Goals
🟢 Beginner	Understand HTTP Verbs, Build basic CRUD, Test using Swagger/Postman
🟡 Intermediate	Use DTOs, Model Validation, Services, Repository Pattern
🔴 Advanced	Add Authentication (JWT), Use Entity Framework + DB, API Versioning, Serilog Logging, Exception Handling
🟣 Expert	Write Unit Tests, Integrate Swagger with XML Comments, Deploy to Azure, Use API Gateway, Microservices
