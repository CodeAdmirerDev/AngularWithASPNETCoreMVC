Let’s structure a Product Catalog mini Angular 19 project with non-standalone components that connects to an ASP.NET Core Web API backend, featuring:

Full CRUD operations

  1) Both Reactive Form and Template-driven Form components (one for each)
  2) Routing setup
  3) HTTPClient integration for API calls
  4) Angular Services + Dependency Injection
  5) Outline / Plan
  6) Backend: ASP.NET Core Web API (brief overview)

You’ll need an ASP.NET Core Web API project exposing endpoints like /api/products.

Typical endpoints:
GET /api/products - Get all products
GET /api/products/{id} - Get product by id
POST /api/products - Create a product
PUT /api/products/{id} - Update product
DELETE /api/products/{id} - Delete product


Step-by-step: ASP.NET Core Web API for Products

1. Create a new Web API project
Open your terminal or Visual Studio terminal and run:

  dotnet new webapi -n ProductCatalogApi  
  cd ProductCatalogApi  

This creates a default Web API project.

2. Create the Product model
Inside the project, create a new folder called Models.

Create a class Product.cs inside Models folder:

namespace ProductCatalogApi.Models  
{  
    public class Product  
    {  
        public int Id { get; set; }  // Primary key, auto increment  
        public string Name { get; set; } = string.Empty;  
        public decimal Price { get; set; }  
        public string? Description { get; set; }  
    }  
}  

3. Setup Entity Framework Core
We’ll use EF Core with an in-memory database for simplicity. You can switch to SQL Server or others easily later.

Add EF Core packages:
dotnet add package Microsoft.EntityFrameworkCore  
dotnet add package Microsoft.EntityFrameworkCore.InMemory  

4. Create DataContext
Create folder Data and create ProductContext.cs:

using Microsoft.EntityFrameworkCore;  
using ProductCatalogApi.Models;  

namespace ProductCatalogApi.Data  
{  
    public class ProductContext : DbContext  
    {  
        public ProductContext(DbContextOptions<ProductContext> options) : base(options) { }  

        public DbSet<Product> Products { get; set; }  
    }  
}  

5. Register DbContext in Program.cs
Open Program.cs and add:

using Microsoft.EntityFrameworkCore;  
using ProductCatalogApi.Data;  

var builder = WebApplication.CreateBuilder(args);  

// Add services to the container.  
builder.Services.AddControllers();  

builder.Services.AddDbContext<ProductContext>(options =>  
    options.UseInMemoryDatabase("ProductCatalogDB"));  

// Add CORS policy to allow Angular frontend to access this API  
builder.Services.AddCors(options =>  
{  
    options.AddPolicy("AllowFrontend",  
        policy => policy.WithOrigins("http://localhost:4200") // Angular dev server URL  
                        .AllowAnyHeader()  
                        .AllowAnyMethod());  
});  

var app = builder.Build();  

app.UseHttpsRedirection();  

app.UseCors("AllowFrontend");  //for cross orgin

app.UseAuthorization();  

app.MapControllers();  

app.Run();  

6. Create ProductsController
Create a folder Controllers, and inside it, ProductsController.cs:

using Microsoft.AspNetCore.Mvc;  
using Microsoft.EntityFrameworkCore;  
using ProductCatalogApi.Data;  
using ProductCatalogApi.Models;  

namespace ProductCatalogApi.Controllers  
{  
    [Route("api/[controller]")]  
    [ApiController]  
    public class ProductsController : ControllerBase  
    {  
        private readonly ProductContext _context;  

        public ProductsController(ProductContext context)  
        {  
            _context = context;  

            // Seed data if empty  
            if (!_context.Products.Any())  
            {  
                _context.Products.AddRange(new[]  
                {  
                    new Product { Name = "Laptop", Price = 1200m, Description = "Gaming laptop" },  
                    new Product { Name = "Smartphone", Price = 800m, Description = "Latest model" }  
                });  
                _context.SaveChanges();  
            }  
        }  

        // GET: api/Products  
        [HttpGet]  
        public async Task<ActionResult<IEnumerable<Product>>> GetProducts()  
        {  
            return await _context.Products.ToListAsync();  
        }  

        // GET: api/Products/5  
        [HttpGet("{id}")]  
        public async Task<ActionResult<Product>> GetProduct(int id)  
        {  
            var product = await _context.Products.FindAsync(id);  

            if (product == null)  
                return NotFound();  

            return product;  
        }  

        // POST: api/Products  
        [HttpPost]  
        public async Task<ActionResult<Product>> CreateProduct(Product product)  
        {  
            _context.Products.Add(product);  
            await _context.SaveChangesAsync();  

            return CreatedAtAction(nameof(GetProduct), new { id = product.Id }, product);  
        }  

        // PUT: api/Products/5  
        [HttpPut("{id}")]  
        public async Task<IActionResult> UpdateProduct(int id, Product product)  
        {  
            if (id != product.Id)  
                return BadRequest();  

            _context.Entry(product).State = EntityState.Modified;  

            try  
            {  
                await _context.SaveChangesAsync();  
            }  
            catch (DbUpdateConcurrencyException)  
            {  
                if (!ProductExists(id))  
                    return NotFound();  
                else  
                    throw;  
            }  

            return NoContent();  
        }  

        // DELETE: api/Products/5  
        [HttpDelete("{id}")]  
        public async Task<IActionResult> DeleteProduct(int id)  
        {  
            var product = await _context.Products.FindAsync(id);  

            if (product == null)  
                return NotFound();  

            _context.Products.Remove(product);  
            await _context.SaveChangesAsync();  

            return NoContent();  
        }  

        private bool ProductExists(int id) =>  
            _context.Products.Any(e => e.Id == id);  
    }  
}  

7. Launch and test API
Run the application:
dotnet run  

By default, it runs on https://localhost:5001 or https://localhost:7001 depending on your setup.

Test endpoints with Postman or curl, e.g.

GET https://localhost:5001/api/products
POST https://localhost:5001/api/products with JSON body


Frontend: Angular 19 Project

1. Angular project create

ng new product-catalog --routing  --no-standalone
cd product-catalog  

2. Generate components and services
ng generate component product-list            # Display list, use template-driven for Create  
ng generate component product-edit            # Edit product, use reactive form  
ng generate service product                    # API service with HTTPClient  

3. Configure Routing
In app-routing.module.ts:

import { NgModule } from '@angular/core';  
import { RouterModule, Routes } from '@angular/router';  
import { ProductListComponent } from './product-list/product-list.component';  
import { ProductEditComponent } from './product-edit/product-edit.component';  

const routes: Routes = [  
  { path: '', redirectTo: 'products', pathMatch: 'full' },  
  { path: 'products', component: ProductListComponent },  
  { path: 'products/edit/:id', component: ProductEditComponent },  
  { path: 'products/create', component: ProductEditComponent },  
  { path: '**', redirectTo: 'products' }  
];  

@NgModule({  
  imports: [RouterModule.forRoot(routes)],  
  exports: [RouterModule]  
})  
export class AppRoutingModule { }  

4. Product interface (model)

Create src/app/models/product.model.ts:
export interface Product {  
  id?: number;  
  name: string;  
  price: number;  
  description?: string;  
}  

5. Product Service
src/app/product.service.ts:

import { Injectable } from '@angular/core';  
import { HttpClient } from '@angular/common/http';  
import { Product } from './models/product.model';  
import { Observable } from 'rxjs';  

@Injectable({  
  providedIn: 'root'  
})  
export class ProductService {  

  private apiUrl = 'https://localhost:5001/api/products'; // change to your API url  

  constructor(private http: HttpClient) { }  

  getProducts(): Observable<Product[]> {  
    return this.http.get<Product[]>(this.apiUrl);  
  }  

  getProduct(id: number): Observable<Product> {  
    return this.http.get<Product>(`${this.apiUrl}/${id}`);  
  }  

  createProduct(product: Product): Observable<Product> {  
    return this.http.post<Product>(this.apiUrl, product);  
  }  

  updateProduct(id: number, product: Product): Observable<void> {  
    return this.http.put<void>(`${this.apiUrl}/${id}`, product);  
  }  

  deleteProduct(id: number): Observable<void> {  
    return this.http.delete<void>(`${this.apiUrl}/${id}`);  
  }  
}  

Make sure in app.module.ts you've imported HttpClientModule:

import { HttpClientModule } from '@angular/common/http';  

@NgModule({  
  imports: [  
    // other imports...  
    HttpClientModule,  
  ],  
})  
export class AppModule { }  

6. ProductListComponent (Template-Driven Form for Create + List + Delete)
product-list.component.html

<h2>Product List</h2>  

<ul>  
  <li *ngFor="let product of products">  
    {{product.name}} - ${{product.price | number:'1.2-2'}}  
    <button (click)="deleteProduct(product.id!)">Delete</button>  
    <button [routerLink]="['/products/edit', product.id]">Edit</button>  
  </li>  
</ul>  

<h3>Add New Product (Template-Driven Form)</h3>  
<form #productForm="ngForm" (ngSubmit)="addProduct(productForm)">  
  
  <label>  
    Name:  
    <input name="name" ngModel required />  
  </label>  
  <br>  
  
  <label>  
    Price:  
    <input name="price" type="number" ngModel required min="0" />  
  </label>  
  <br>  

  <label>  
    Description:  
    <textarea name="description" ngModel></textarea>  
  </label>  
  <br>  

  <button type="submit" [disabled]="productForm.invalid">Add Product</button>  
</form>  

product-list.component.ts

import { Component, OnInit } from '@angular/core';  
import { ProductService } from '../product.service';  
import { Product } from '../models/product.model';  
import { NgForm } from '@angular/forms';  

@Component({  
  selector: 'app-product-list',  
  templateUrl: './product-list.component.html'  
})  
export class ProductListComponent implements OnInit {  

  products: Product[] = [];  

  constructor(private productService: ProductService) { }  

  ngOnInit() {  
    this.loadProducts();  
  }  

  loadProducts() {  
    this.productService.getProducts().subscribe(products => this.products = products);  
  }  

  addProduct(form: NgForm) {  
    if (!form.valid) return;  

    this.productService.createProduct(form.value).subscribe(() => {  
      this.loadProducts();  
      form.resetForm();  
    });  
  }  

  deleteProduct(id: number) {  
    if (confirm('Are you sure?')) {  
      this.productService.deleteProduct(id).subscribe(() => this.loadProducts());  
    }  
  }  
}  
Make sure to import FormsModule in app.module.ts for template-driven forms.

7. ProductEditComponent (Reactive Form for Update/Create)
product-edit.component.html

<h2>{{ isEditMode ? 'Edit Product' : 'Create Product' }}</h2>  

<form [formGroup]="productForm" (ngSubmit)="onSubmit()">  

  <label>  
    Name:  
    <input formControlName="name" />  
  </label>  
  <div *ngIf="productForm.controls['name'].invalid && productForm.controls['name'].touched">  
    Name is required  
  </div>  

  <label>  
    Price:  
    <input type="number" formControlName="price" />  
  </label>  
  <div *ngIf="productForm.controls['price'].invalid && productForm.controls['price'].touched">  
    Price must be positive  
  </div>  

  <label>  
    Description:  
    <textarea formControlName="description"></textarea>  
  </label>  

  <button type="submit" [disabled]="productForm.invalid">{{ isEditMode ? 'Update' : 'Create' }}</button>  
  <button type="button" (click)="cancel()">Cancel</button>  
</form>  

product-edit.component.ts

import { Component, OnInit } from '@angular/core';  
import { FormBuilder, Validators, FormGroup } from '@angular/forms';  
import { ActivatedRoute, Router } from '@angular/router';  
import { ProductService } from '../product.service';  
import { Product } from '../models/product.model';  

@Component({  
  selector: 'app-product-edit',  
  templateUrl: './product-edit.component.html'  
})  
export class ProductEditComponent implements OnInit {  
  
  productForm!: FormGroup;  
  isEditMode = false;  
  productId?: number;  

  constructor(  
    private fb: FormBuilder,  
    private route: ActivatedRoute,  
    private router: Router,  
    private productService: ProductService  
  ) {}  

  ngOnInit() {  
    this.productForm = this.fb.group({  
      name: ['', Validators.required],  
      price: [0, [Validators.required, Validators.min(0)]],  
      description: ['']  
    });  

    this.route.paramMap.subscribe(params => {  
      const idParam = params.get('id');  
      if (idParam) {  
        this.isEditMode = true;  
        this.productId = +idParam;  
        this.loadProduct(this.productId);  
      }  
    });  
  }  

  loadProduct(id: number) {  
    this.productService.getProduct(id).subscribe(product => {  
      this.productForm.patchValue(product);  
    });  
  }  

  onSubmit() {  
    if (this.productForm.invalid) return;  

    const product: Product = this.productForm.value;  

    if (this.isEditMode && this.productId) {  
      this.productService.updateProduct(this.productId, product).subscribe(() => {  
        this.router.navigate(['/products']);  
      });  
    } else {  
      this.productService.createProduct(product).subscribe(() => {  
        this.router.navigate(['/products']);  
      });  
    }  
  }  

  cancel() {  
    this.router.navigate(['/products']);  
  }  
}  

Import ReactiveFormsModule in app.module.ts.

8. Add Navigation Links in Main App Component (app.component.html)

<nav>  
  <a routerLink="/products">Product List</a>  
  <a routerLink="/products/create">Add New Product</a>  
</nav>  

<router-outlet></router-outlet>  

9. Import all necessary modules in app.module.ts
import { NgModule } from '@angular/core';  
import { BrowserModule } from '@angular/platform-browser';  
import { FormsModule, ReactiveFormsModule } from '@angular/forms';  
import { HttpClientModule } from '@angular/common/http';  

import { AppRoutingModule } from './app-routing.module';  
import { AppComponent } from './app.component';  
import { ProductListComponent } from './product-list/product-list.component';  
import { ProductEditComponent } from './product-edit/product-edit.component';  

@NgModule({  
  declarations: [  
    AppComponent,  
    ProductListComponent,  
    ProductEditComponent  
  ],  
  imports: [  
    BrowserModule,  
    AppRoutingModule,  
    FormsModule,          // Template-driven forms  
    ReactiveFormsModule,  // Reactive forms  
    HttpClientModule  
  ],  
  providers: [],  
  bootstrap: [AppComponent]  
})  
export class AppModule { }  

Summary
ProductListComponent: Lists products, supports create with template-driven form and delete
ProductEditComponent: Supports editing and creating products with reactive forms
ProductService: Handles HTTP communication with ASP.NET Core backend
Routing implemented for list, create, edit
Dependency injection of service in components
Proper validation and UX flow
